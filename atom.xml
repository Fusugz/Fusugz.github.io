<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>songmin&#39;s blog</title>
  
  <subtitle>无忌不悔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fusugz.github.io/"/>
  <updated>2020-05-14T14:01:17.044Z</updated>
  <id>https://fusugz.github.io/</id>
  
  <author>
    <name>fusugz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity引用UIWebView问题解决</title>
    <link href="https://fusugz.github.io/2020/05/14/unity-uiwebview/"/>
    <id>https://fusugz.github.io/2020/05/14/unity-uiwebview/</id>
    <published>2020-05-14T13:54:47.000Z</published>
    <updated>2020-05-14T14:01:17.044Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>2020年5月以来，上传到iTunes Connect的ipa文件如包含UIWebView相关引用，会导致ipa包无法通过处理，构建版本不可用。</p><p>审核团队在邮件中给出的说明如下：</p><blockquote><p>ITMS-90809: Deprecated API Usage – Apple will stop accepting submissions of apps that use UIWebView APIs . See <a href="https://developer.apple.com/documentation/uikit/uiwebview" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uiwebview</a><br>for more information.</p></blockquote><p>使用<code>find</code>查找工程中相关API：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . | grep -v .svn  | grep "\.a" | grep -v "\.app" | xargs grep UIWebView</span><br></pre></td></tr></table></figure><p>结果指向libiPhone-lib.a文件，该文件是Unity导出工程时生成的系统库文件，说明其中包含UIWebView引用。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><h4 id="升级Unity版本"><a href="#升级Unity版本" class="headerlink" title="升级Unity版本"></a>升级Unity版本</h4><p>Unity在Unity2017.4.33版本中修复了此问题，条件允许可升级Unity版本来解决。</p><blockquote><p>iOS:Fixed Deprecated API Usage warning for using UIWebView when submitting Builds to the App Store Connect.（1180664， 1182274）</p></blockquote><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><h4 id="去除libiPhone-lib-a中UIWebView的引用"><a href="#去除libiPhone-lib-a中UIWebView的引用" class="headerlink" title="去除libiPhone-lib.a中UIWebView的引用"></a>去除libiPhone-lib.a中UIWebView的引用</h4><ol><li><p>首先，生成一个URLUtility.mm文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> core &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">type</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">class</span> <span class="title">StringStorageDefault</span> &#123;</span>&#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">type</span>,<span class="title">class</span> <span class="title">type2</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">class</span> <span class="title">basic_string</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">char</span> * str;</span><br><span class="line">        basic_string( <span class="keyword">char</span>* arg)&#123;</span><br><span class="line">            str = arg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OpenURLInGame</span><span class="params">(core::basic_string&lt; <span class="keyword">char</span>,core::StringStorageDefault&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;arg)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OpenURL</span><span class="params">(core::basic_string&lt;<span class="keyword">char</span>,core::StringStorageDefault&lt;<span class="keyword">char</span>&gt; &gt;<span class="keyword">const</span> &amp;arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">void</span> *arg2 = arg.str;</span><br><span class="line">    UIApplication *app = [UIApplication sharedApplication];</span><br><span class="line">    NSString *urlStr = [NSString stringWithUTF8String:(<span class="keyword">char</span> *)arg2];</span><br><span class="line">    NSURL *url = [NSURL URLWithString:urlStr];</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">10.0</span>, *)) &#123;</span><br><span class="line">        [app openURL:url options:@&#123;UIApplicationOpenURLOptionsSourceApplicationKey : @YES&#125; completionHandler:nil];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [app openURL:url];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OpenURL</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp;arg)</span></span>&#123;</span><br><span class="line">    UIApplication *app = [UIApplication sharedApplication];</span><br><span class="line">    NSString *urlStr = [NSString stringWithUTF8String:arg.c_str()];</span><br><span class="line">    NSURL *url = [NSURL URLWithString:urlStr];</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">10.0</span>, *)) &#123;</span><br><span class="line">        [app openURL:url options:@&#123;UIApplicationOpenURLOptionsSourceApplicationKey : @YES&#125; completionHandler:nil];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [app openURL:url];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>使用lipo查看libiPhone-lib.a文件中包含的架构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lipo -info libiPhone-lib.a </span><br><span class="line">Architectures in the fat file: libiPhone-lib.a are: armv7 arm64 armv7s</span><br></pre></td></tr></table></figure><p>可知，以上libiPhone-lib.a中包含的架构有armv7、arm64和armv7s，以下以arm64为例。</p></li><li><p>使用URLUtility.mm生成对应架构下URLUtility.o文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -c URLUtility.mm -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk</span><br></pre></td></tr></table></figure></li><li><p>分离libiPhone-lib.a中各架构文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo libiPhone-lib.a -thin arm64 -output ./URLUtility64/libiPhone-lib64.a</span><br></pre></td></tr></table></figure></li><li><p>移除对应架构中的原有URLUtility.o文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar -d ./URLUtility64/libiPhone-lib64.a URLUtility.o</span><br></pre></td></tr></table></figure></li><li><p>将新生成的URLUtility.o文件添加到对应架构的.a中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar -q ./URLUtility64/libiPhone-lib64.a ./URLUtility64/URLUtility.o</span><br></pre></td></tr></table></figure></li><li><p>将各架构的.a文件合并生成新的libiPhone-lib.a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -create ./URLUtility64/libiPhone-lib64.a ./URLUtilityv7/libiPhone-libv7.a ./URLUtilityv7s/libiPhone-libv7s.a -output ./new/libiPhone-lib.a</span><br></pre></td></tr></table></figure></li></ol><p>以上，即可替换libiPhone-lib.a中的URLUtility.o文件，从而达到移除UIWebView相关引用的目的。</p><p>可以使用Python3将以上流程用脚本实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/evn python</span></span><br><span class="line"><span class="comment"># coding=UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restructure</span><span class="params">()</span>:</span></span><br><span class="line">    iPhone_OS_SDK_path = <span class="string">"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk"</span></span><br><span class="line">    arm64_path = <span class="string">"./URLUtility64/"</span></span><br><span class="line">    armv7_path = <span class="string">"./URLUtilityv7/"</span></span><br><span class="line">    armv7s_path = <span class="string">"./URLUtilityv7s/"</span></span><br><span class="line">    new_lib_path = <span class="string">"./new"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(arm64_path):</span><br><span class="line">        print(<span class="string">"------移除原URLUtility64文件------"</span>)</span><br><span class="line">        shutil.rmtree(arm64_path)</span><br><span class="line">    os.makedirs(arm64_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(armv7_path):</span><br><span class="line">        shutil.rmtree(armv7_path)</span><br><span class="line">        print(<span class="string">"------移除原URLUtilityv7文件------"</span>)</span><br><span class="line">    os.makedirs(armv7_path)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.exists(armv7s_path):</span><br><span class="line">        shutil.rmtree(armv7s_path)</span><br><span class="line">        print(<span class="string">"------移除原URLUtilityv7s文件------"</span>)</span><br><span class="line">    os.makedirs(armv7s_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(new_lib_path):</span><br><span class="line">        shutil.rmtree(new_lib_path)</span><br><span class="line">        print(<span class="string">"------移除原new文件------"</span>)</span><br><span class="line">    os.makedirs(new_lib_path)</span><br><span class="line"></span><br><span class="line">    cmd_generate_o_arm64 = <span class="string">"clang -c URLUtility.mm -arch arm64 -isysroot "</span> + iPhone_OS_SDK_path</span><br><span class="line">    cmd_generate_o_armv7 = <span class="string">"clang -c URLUtility.mm -arch armv7 -isysroot "</span> + iPhone_OS_SDK_path</span><br><span class="line">    cmd_generate_o_armv7s = <span class="string">"clang -c URLUtility.mm -arch armv7s -isysroot "</span> + iPhone_OS_SDK_path</span><br><span class="line"></span><br><span class="line">    cmd_thin_arm64 = <span class="string">"lipo libiPhone-lib.a -thin arm64 -output ./URLUtility64/libiPhone-lib64.a"</span></span><br><span class="line">    cmd_thin_armv7 = <span class="string">"lipo libiPhone-lib.a -thin armv7 -output ./URLUtilityv7/libiPhone-libv7.a"</span></span><br><span class="line">    cmd_thin_armv7s = <span class="string">"lipo libiPhone-lib.a -thin armv7s -output ./URLUtilityv7s/libiPhone-libv7s.a"</span></span><br><span class="line"></span><br><span class="line">    cmd_mv_arm64 = <span class="string">"mv URLUtility.o ./URLUtility64/URLUtility.o"</span></span><br><span class="line">    cmd_mv_armv7 = <span class="string">"mv URLUtility.o ./URLUtilityv7/URLUtility.o"</span></span><br><span class="line">    cmd_mv_armv7s = <span class="string">"mv URLUtility.o ./URLUtilityv7s/URLUtility.o"</span></span><br><span class="line"></span><br><span class="line">    cmd_delete_arm64 = <span class="string">"ar -d ./URLUtility64/libiPhone-lib64.a URLUtility.o"</span></span><br><span class="line">    cmd_delete_armv7 = <span class="string">"ar -d ./URLUtilityv7/libiPhone-libv7.a URLUtility.o"</span></span><br><span class="line">    cmd_delete_armv7s = <span class="string">"ar -d ./URLUtilityv7s/libiPhone-libv7s.a URLUtility.o"</span></span><br><span class="line"></span><br><span class="line">    cmd_add_arm64 = <span class="string">"ar -q ./URLUtility64/libiPhone-lib64.a ./URLUtility64/URLUtility.o"</span></span><br><span class="line">    cmd_add_armv7 = <span class="string">"ar -q ./URLUtilityv7/libiPhone-libv7.a ./URLUtilityv7/URLUtility.o"</span></span><br><span class="line">    cmd_add_armv7s = <span class="string">"ar -q ./URLUtilityv7s/libiPhone-libv7s.a ./URLUtilityv7s/URLUtility.o"</span></span><br><span class="line">    </span><br><span class="line">    cmd_create_lib = <span class="string">"lipo -create ./URLUtility64/libiPhone-lib64.a ./URLUtilityv7/libiPhone-libv7.a ./URLUtilityv7s/libiPhone-libv7s.a -output "</span> + new_lib_path + <span class="string">"/libiPhone-lib.a"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"------处理arm64架构------"</span>)</span><br><span class="line">    os.system(cmd_generate_o_arm64)</span><br><span class="line">    os.system(cmd_thin_arm64)</span><br><span class="line">    os.system(cmd_mv_arm64)</span><br><span class="line">    os.system(cmd_delete_arm64)</span><br><span class="line">    os.system(cmd_add_arm64)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"------处理armv7架构------"</span>)</span><br><span class="line">    os.system(cmd_generate_o_armv7)</span><br><span class="line">    os.system(cmd_thin_armv7)</span><br><span class="line">    os.system(cmd_mv_armv7)</span><br><span class="line">    os.system(cmd_delete_armv7)</span><br><span class="line">    os.system(cmd_add_armv7)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"------处理armv7s架构------"</span>)</span><br><span class="line">    os.system(cmd_generate_o_armv7s)</span><br><span class="line">    os.system(cmd_thin_armv7s)</span><br><span class="line">    os.system(cmd_mv_armv7s)</span><br><span class="line">    os.system(cmd_delete_armv7s)</span><br><span class="line">    os.system(cmd_add_armv7s)</span><br><span class="line"></span><br><span class="line">    os.system(cmd_create_lib)</span><br><span class="line">    print(<span class="string">"🍀生成新的libiPhone-lib.a，已移除UIWebView引用"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    restructure()</span><br></pre></td></tr></table></figure><p>初始文件目录为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── URLUtility.mm</span><br><span class="line">└── libiPhone-lib.a</span><br></pre></td></tr></table></figure><p>脚本运行完成后文件目录为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── URLUtility.mm</span><br><span class="line">├── URLUtility64</span><br><span class="line">│   ├── URLUtility.o</span><br><span class="line">│   └── libiPhone-lib64.a</span><br><span class="line">├── URLUtilityv7</span><br><span class="line">│   ├── URLUtility.o</span><br><span class="line">│   └── libiPhone-libv7.a</span><br><span class="line">├── URLUtilityv7s</span><br><span class="line">│   ├── URLUtility.o</span><br><span class="line">│   └── libiPhone-libv7s.a</span><br><span class="line">├── libiPhone-lib.a</span><br><span class="line">├── new</span><br><span class="line">│   └── libiPhone-lib.a</span><br><span class="line">└── restructure.</span><br></pre></td></tr></table></figure><p>其中new文件目录下的libiPhone-lib.a已实现UIWebView引用的移除，使用<code>find</code>命令进行验证，发现新的libiPhone-lib.a中已不包含UIWebView相关任何代码。将该文件与工程中的对应文件进行替换，即可解决ipa包上传问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;2020年5月以来，上传到iTunes Connect的ipa文件如包含UIWebView相关引用，会导致ipa包无法通过处理，构建版本不可
      
    
    </summary>
    
      <category term="UIWebView" scheme="https://fusugz.github.io/categories/UIWebView/"/>
    
    
      <category term="unity" scheme="https://fusugz.github.io/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>面向接口编程</title>
    <link href="https://fusugz.github.io/2019/09/08/face-to-protocol/"/>
    <id>https://fusugz.github.io/2019/09/08/face-to-protocol/</id>
    <published>2019-09-08T12:47:21.000Z</published>
    <updated>2019-09-08T12:48:48.087Z</updated>
    
    <content type="html"><![CDATA[<p><strong>面向接口编程不与面向对象编程同级，而是附属于面向对象编程思想，是面向对象编程思想的精髓之一。</strong></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>在系统分析和架构中，分清层次和依赖关系，每个层次不是直接向其上层提供服务（即不是直接实例化在上层中），而是通过定义一组接口，仅向上层暴露其接口功能，上层对于下层仅仅是接口依赖，而不依赖具体类。</p></blockquote><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><ol><li>接口是一组规则的集合，它规定了实现本接口的类或者接口必须拥有的一组规则。</li><li>接口是在一定粒度视图上同类事物的抽象表示，实现了多态性。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>结构清晰，使用方便。</li><li>提高系统的灵活性，当下层需要改变时，只要接口及接口功能不变，则上层不用做任何修改。</li><li>设计合理的接口，有利于程序的规范化，可并行进行开发，从而提高效率。</li><li>实现了程序的可插拔性，对于不同的需求切换不同的实现，降低了耦合度，随着系统的复杂性的提高优势会愈加明显。</li><li>允许多重实现，弥补了继承的缺陷。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>增加了设计复杂度，不适用于简单的系统。</li><li>可能会降低代码的可复用性。</li><li>可能会降低程序的执行效率。</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><blockquote><p> 接口分为底层实现、接口层定义、上层调用三部分。</p></blockquote><h4 id="接口层"><a href="#接口层" class="headerlink" title="接口层"></a>接口层</h4><ul><li>接口层是上下层的粘合剂，实现上下层的分离。</li><li>接口层通过单例持有底层服务。</li><li>底层需要将自己的功能注入给接口层。</li><li>上层通过指定的入口调用下层的接口。</li></ul><h4 id="底层"><a href="#底层" class="headerlink" title="底层"></a>底层</h4><ul><li>底层需要遵循接口层协议，并实现protocol的声明的方法。</li><li>底层的服务需要注入到接口层，可以是底层setup时注入，也可以是二方的其他合适的位置注入。</li></ul><h4 id="上层"><a href="#上层" class="headerlink" title="上层"></a>上层</h4><ul><li>上层只依赖接口层，通过接口层调用底层方法。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;面向接口编程不与面向对象编程同级，而是附属于面向对象编程思想，是面向对象编程思想的精髓之一。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;b
      
    
    </summary>
    
      <category term="code-mind" scheme="https://fusugz.github.io/categories/code-mind/"/>
    
    
      <category term="protocol" scheme="https://fusugz.github.io/tags/protocol/"/>
    
  </entry>
  
  <entry>
    <title>ARKit应用之导航</title>
    <link href="https://fusugz.github.io/2019/02/19/arkit-navigation/"/>
    <id>https://fusugz.github.io/2019/02/19/arkit-navigation/</id>
    <published>2019-02-19T06:39:03.000Z</published>
    <updated>2019-02-19T06:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>ARKit 2.0发布以来，iOS端AR类应用层出不穷。由于其强大的功能，许多人们对于AR应用的美好设想都一一实现。<br>AR（Augmented Reality）的最初定义，就是增强现实（或扩增现实），即在外部设备的辅助下增强现实生活的感官体验。AR的本质也是虚拟，是在现实世界之上叠加虚拟场景以提供更加直观或有趣的信息。<br>基于这一定义，人们很容易想到利用AR看到周边街景中被遮挡的部分，并显示其基本信息的应用场景。利用手机这一外部辅助设备，内置摄像头捕捉到的画面就是现实景观，开发者可以在摄像头的实景之上添加想要添加的3D标注，并附以有用的信息，简单的AR导航就得能以实现。</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>该功能的实现核心是基于CoreLocation的实时定位功能与ARKit的图层的结合。实现的基础除ARKit和iOS 11.0+以外，还借鉴了GitHub开源项目<a href="https://github.com/ProjectDent/ARKit-CoreLocation" target="_blank" rel="noopener">ARKit+CoreLocation</a>提供的<code>ARCL</code>工具类，建议首先仔细阅读此项目中源码，领悟实现思想和逻辑。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h2><p>项目中代码使用Swift 4.2 编写。<br>1.首先，在项目中引入上文中提到的 <code>ARCL</code>中的<code>Source</code>部分，或者直接pod ‘ARCL’。<br>其中各文件中代码的作用可以从他们的命名中一目了然，这里就不做赘述，参见以下文件目录结构：</p><blockquote><p>Source<br>├── CGPoint+Extensions.swift<br>├── CLLocation+Extensions.swift<br>├── FloatingPoint+Radians.swift<br>├── LocationManager.swift<br>├── LocationNode.swift<br>├── SCNNode+Extensions.swift<br>├── SCNVector3+Extensions.swift<br>├── SceneLocationEstimate+Extensions.swift<br>├── SceneLocationEstimate.swift<br>└── SceneLocationView.swift</p></blockquote><p>2.在Plist中加入NSCameraUsageDescription和NSLocationWhenInUseUsageDescription的key并添加简短描述。</p><ol start="3"><li>改写<code>ARCL</code>中的<code>LocationNode.swift</code>,即构造你需要的标注样式和内容。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">open class LocationAnnotationNode: LocationNode &#123;</span><br><span class="line">    ///An image to use for the annotation</span><br><span class="line">    ///When viewed from a distance, the annotation will be seen at the size provided</span><br><span class="line">    ///e.g. if the size is 100x100px, the annotation will take up approx 100x100 points on screen.</span><br><span class="line">    public let image: UIImage</span><br><span class="line"></span><br><span class="line">    ///Subnodes and adjustments should be applied to this subnode</span><br><span class="line">    ///Required to allow scaling at the same time as having a 2D &apos;billboard&apos; appearance</span><br><span class="line">    public let annotationNode: SCNNode</span><br><span class="line"></span><br><span class="line">    ///Whether the node should be scaled relative to its distance from the camera</span><br><span class="line">    ///Default value (false) scales it to visually appear at the same size no matter the distance</span><br><span class="line">    ///Setting to true causes annotation nodes to scale like a regular node</span><br><span class="line">    ///Scaling relative to distance may be useful with local navigation-based uses</span><br><span class="line">    ///For landmarks in the distance, the default is correct</span><br><span class="line">    public var scaleRelativeToDistance = false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public init(location: CLLocation?, image: UIImage, title: String, distance: String) &#123;</span><br><span class="line">        self.image = image</span><br><span class="line"></span><br><span class="line">        let frame: CGRect = CGRect(x:0.0, y:0.0, width:200.0, height:82.0)</span><br><span class="line">        let bgImageView = UIImageView.init(frame: frame)</span><br><span class="line">        bgImageView.image = image</span><br><span class="line"></span><br><span class="line">        let titleLabel = UILabel.init(frame: CGRect(x: 0.0, y: 0.0, width: 120.0, height: 60.0))</span><br><span class="line">        titleLabel.textColor = UIColor.darkText</span><br><span class="line">        titleLabel.font = UIFont.boldSystemFont(ofSize: 18.0)</span><br><span class="line">        titleLabel.text = title</span><br><span class="line">        titleLabel.textAlignment = NSTextAlignment.center</span><br><span class="line">        bgImageView.addSubview(titleLabel)</span><br><span class="line"></span><br><span class="line">        let distanceLabel = UILabel.init(frame: CGRect(x: 120.0, y: 0.0, width: 80.0, height: 60.0))</span><br><span class="line">        distanceLabel.textColor = UIColor.init(red: 19.0/255.0, green: 115.0/255.0, blue: 114.0/255.0, alpha: 1.0)</span><br><span class="line">        distanceLabel.font = UIFont.systemFont(ofSize: 16.0)</span><br><span class="line">        distanceLabel.text = distance</span><br><span class="line">        distanceLabel.textAlignment = NSTextAlignment.center</span><br><span class="line">        bgImageView.addSubview(distanceLabel)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        let plane = SCNPlane(width: frame.size.width/100, height: frame.size.height/100)</span><br><span class="line">        plane.firstMaterial!.diffuse.contents = bgImageView</span><br><span class="line">        plane.firstMaterial!.lightingModel = .constant</span><br><span class="line"></span><br><span class="line">        annotationNode = SCNNode()</span><br><span class="line">        annotationNode.geometry = plane</span><br><span class="line"></span><br><span class="line">        super.init(location: location)</span><br><span class="line"></span><br><span class="line">        self.name = title</span><br><span class="line">        self.distance = distance</span><br><span class="line">        self.distanceLabel = distanceLabel</span><br><span class="line"></span><br><span class="line">        let billboardConstraint = SCNBillboardConstraint()</span><br><span class="line">        billboardConstraint.freeAxes = SCNBillboardAxis.Y</span><br><span class="line">        constraints = [billboardConstraint]</span><br><span class="line"></span><br><span class="line">        addChildNode(annotationNode)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>以上代码的作用是使用位置名称和距离创建标注，返回一个带标题和距离信息的气泡，注意：这里的距离是实时变化的，也就是在初始化时给定一个初始值，而在获取到的位置信息后通过计算实时进行更新，以达到动态更新场景的效果</strong></p><h2 id="呈现"><a href="#呈现" class="headerlink" title="呈现"></a>呈现</h2><p>在以上准备工作的基础上，我们需要将AR标注实时呈现在摄像头中。<br>因此我们需要初始化<code>SceneLocationView</code>和<code>MKMapView</code>,并完成相关配置。</p><ul><li><p>初始化<code>sceneLocationView</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sceneLocationView.locationDelegate = self as? SceneLocationViewDelegate</span><br><span class="line">        // Set to true to display am arrow wjoch points north.</span><br><span class="line">        sceneLocationView.orientToTrueNorth = false</span><br><span class="line">        sceneLocationView.showAxesNode = true</span><br><span class="line">        if displayDebugging &#123;</span><br><span class="line">            sceneLocationView.showFeaturePoints = true</span><br><span class="line">        &#125;</span><br><span class="line">        buildData().forEach &#123;</span><br><span class="line">            sceneLocationView.addLocationNodeWithConfirmedLocation(locationNode: $0)</span><br><span class="line">        &#125;</span><br><span class="line">        view.addSubview(sceneLocationView)</span><br></pre></td></tr></table></figure></li><li><p>初始化<code>mapView</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if !showMapView &#123;</span><br><span class="line">            mapView.delegate = self as? MKMapViewDelegate</span><br><span class="line">            mapView.showsUserLocation = true</span><br><span class="line">            mapView.isHidden = true</span><br><span class="line">            view.addSubview(mapView)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><p>使用<code>LocationAnnotationNode</code>的<code>init</code>方法创建标注点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func buildNode(latitude: CLLocationDegrees, longtitude: CLLocationDegrees, altitude: CLLocationDistance, imageName: String, title: String, distance: String) -&gt; LocationAnnotationNode &#123;</span><br><span class="line">        let location = CLLocation(coordinate: CLLocationCoordinate2D(latitude: latitude, longitude: longtitude), altitude: altitude)</span><br><span class="line">        let image = UIImage(named: imageName)!</span><br><span class="line"></span><br><span class="line">        return LocationAnnotationNode(location: location, image: image, title: title, distance: distance)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再利用定时器连续且间断地更新标注信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Update user location and show distance from current location to nodes added</span><br><span class="line">updateUserLocationTimer = Timer.scheduledTimer(timeInterval: 3.0,</span><br><span class="line">                                                       target: self,</span><br><span class="line">                                                       selector: #selector(ViewController.updateUserLocation),</span><br><span class="line">                                                       userInfo: nil,</span><br><span class="line">                                                       repeats: true)</span><br></pre></td></tr></table></figure></p><p>在适当的时候更新距离信息即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@objc func updateUserLocation() &#123;</span><br><span class="line">        guard let currentLocation = sceneLocationView.currentLocation() else &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DispatchQueue.main.async &#123;</span><br><span class="line">            if let bestEstimate = self.sceneLocationView.bestLocationEstimate(), let position = self.sceneLocationView.currentScenePosition() &#123;</span><br><span class="line">                print(&quot;------------------------------------&quot;)</span><br><span class="line">                print(&quot;Fetch current location&quot;)</span><br><span class="line">                print(&quot;Best location estimate, position: \(bestEstimate.position), location: \(bestEstimate.location.coordinate), accurace: \(bestEstimate.location.horizontalAccuracy)&quot;)</span><br><span class="line">                print(&quot;current position: \(position)&quot;)</span><br><span class="line"></span><br><span class="line">                let translation = bestEstimate.translatedLocation(to: position)</span><br><span class="line">                print(&quot;translation: \(translation)&quot;)</span><br><span class="line">                print(&quot;translated location: \(currentLocation)&quot;)</span><br><span class="line">                print(&quot;------------------------------------&quot;)</span><br><span class="line"></span><br><span class="line">                // Location nodes</span><br><span class="line">                for node in self.sceneLocationView.locationNodes &#123;</span><br><span class="line">                    let distance = currentLocation.distance(from: node.location)</span><br><span class="line">                    var distanceStr: String = String(format: &quot;%.0fm&quot;, distance)</span><br><span class="line">                    if distance &gt;= 1000 &#123;</span><br><span class="line">                        distanceStr = String(format: &quot;%.1fkm&quot;, (distance/1000))</span><br><span class="line">                    &#125;</span><br><span class="line">                    node.distance = distanceStr</span><br><span class="line">                    node.distanceLabel.text = distanceStr</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;ARKit 2.0发布以来，iOS端AR类应用层出不穷。由于其强大的功能，许多人们对于AR应用的美好设想都一一实现。&lt;br&gt;AR（Augme
      
    
    </summary>
    
    
      <category term="ARKit" scheme="https://fusugz.github.io/tags/ARKit/"/>
    
      <category term="Navigation" scheme="https://fusugz.github.io/tags/Navigation/"/>
    
  </entry>
  
  <entry>
    <title>EasyAR应用之iOS原生视频播放【脱卡】</title>
    <link href="https://fusugz.github.io/2018/12/04/easyar-tuoka/"/>
    <id>https://fusugz.github.io/2018/12/04/easyar-tuoka/</id>
    <published>2018-12-04T13:11:34.000Z</published>
    <updated>2018-12-24T13:43:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/2251123-2e100649d08e4d29.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="虹藏不见"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是EasyAR应用系列的第二篇，针对AR视频播放，“脱卡”功能是亟待解决的问题。<br>然而，EasyAR的文档中没有关于iOS原生脱卡的具体实现方式，论坛中提问也没有得到有用的回答。然而，在旧版论坛的<a href="http://bbs.sightp.com/forum.php?mod=viewthread&amp;tid=11643&amp;highlight=iOS" target="_blank" rel="noopener">请问 iOS 识别好后 播放视频尺寸改变问题</a>中，EasyARSupport给出了视频姿态和尺寸的修改方法，代码由C语言编写。<br><img src="https://upload-images.jianshu.io/upload_images/2251123-72cbbd7d0af4c00d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改姿态和尺寸"><br>笔者从该方法中得到启发：</p><blockquote><p>追踪器捕捉到目标图像后，若目标图像脱离摄像头范围时，可以调整视频的姿态和尺寸，使视频仍位于视图的中央并维持原尺寸，脱卡问题就迎刃而解。</p></blockquote><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ul><li>分析实现原理<br>根据EasyARSupport提供的代码截图，可以得知代码做了两件事：</li></ul><ol><li>初始化一个<code>cameraView</code>并为其`data’属性赋值，其中的下标为12的数值决定了视频的可见范围，为关键参数。</li><li>为视频渲染提供了一个尺寸，用来规定视频的尺寸比例。<br>因此，我们可以得出解决方案：在适当的时机调整视频的姿态和尺寸，并实现继续播放视频。</li></ol><ul><li>寻找适当的时机<br>在实例代码的helloar.m的 <code>render()</code>函数中，<code>targetInstances</code>为获取到的目标实例，当目标实例的<code>count &gt; 0&#39;即被认为追踪到目标，此时我们进行一系列视频渲染工作；而当其</code>count &gt; 0`不成立时，我们可以认为目标已脱离摄像头可视范围，此时即为适当的实际。</li><li>实现脱卡<br>根据上文中C语言代码是参考，我们可以相应地编写OC实现代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (imagetargetSize != nil) &#123; // 脱卡</span><br><span class="line">// data[12] = 0; 上下位置参数 -0.5(最上)， 0（中）， 0.5（最下）</span><br><span class="line">NSArray *data = @[@0, @-1, @0, @0, @-1, @0, @0, @0, @0, @0, @1, @0, @0, @0, @-1, @1]; </span><br><span class="line">easyar_Matrix44F *cameraView = [easyar_Matrix44F create:data];</span><br><span class="line">easyar_Vec2F *size = [easyar_Vec2F create:@[@1.0f, @1.0f]];</span><br><span class="line"></span><br><span class="line">[current_video_renderer render:[camera projectionGL:0.2f farPlane:500.f] cameraview:cameraView size:size];</span><br><span class="line">[video update];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>其中的<code>imagetargetSize</code>初始值为nil,并在<code>count &gt; 0</code>中由<code>[imagetarget size]</code>的值赋予。其内在逻辑是，<code>imagetargetSize</code>用于判断目标是否曾被追踪器获取，若未获取，则视频也还不确定，也就不存在调整姿态了。</p><h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>以上，iOS原生视频视频播放的“脱卡”功能得以实现。<br>这里有<a href="https://github.com/fusugz/easyarVideo/blob/master/helloarvideo/helloar_offcark.m" target="_blank" rel="noopener">helloar_offcard.m</a>供参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2251123-2e100649d08e4d29.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
      <category term="EasyAR" scheme="https://fusugz.github.io/categories/EasyAR/"/>
    
    
      <category term="EasyAR" scheme="https://fusugz.github.io/tags/EasyAR/"/>
    
  </entry>
  
  <entry>
    <title>ARKit应用之识别图像播放视频</title>
    <link href="https://fusugz.github.io/2018/11/20/recognizing-images-to-play-video/"/>
    <id>https://fusugz.github.io/2018/11/20/recognizing-images-to-play-video/</id>
    <published>2018-11-20T13:23:50.000Z</published>
    <updated>2018-11-20T13:39:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/2251123-7af2c7a08693ad96.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="卧闻海棠花"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ARKit为iOS系统提供了对图像的识别功能。可通过检测用户环境中的已知2D图像，使用其位置放置AR内容。其中的AR内容可以是一个立体模型，也可以是一张图片或一个视频。</p><p>这一功能必将使得未来的app更加有趣，也让我们有了新的实现形式，让我们来尝试一下基于ARkit的图片识别功能在app内播放视频吧。</p><blockquote><p>环境：iOS 11.3+ | Xcode 10.0+ </p><p>Framework：ARkit</p></blockquote><h2 id="启用图像检测"><a href="#启用图像检测" class="headerlink" title="启用图像检测"></a>启用图像检测</h2><p>首先，构建目标图像</p><p>目标图像即通过摄像头扫描识别的目标图像，使用自己的图像进行检测，需要将目标图像添加到Xcode中的Assets目录中。</p><p><img src="https://upload-images.jianshu.io/upload_images/2251123-f25726a28248f22d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加目标图片"></p><ol><li>打开项目的Assets目录，然后添加新的AR资源组。</li><li>将所需添加的图片添加到创建的资源组中。</li><li>对于每个图片，使用检查器来描述你希望在用户的真实环境中找到它的图像的物理大小。（可使用预览来查看图片大小，注意单位，获取后必须添加图片的Size，图片的宽高不得小于480 pixels）</li></ol><p>使用ARkit需要引入所需的系统库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;SceneKit/SceneKit.h&gt;</span><br><span class="line">#import &lt;ARKit/ARKit.h&gt;</span><br></pre></td></tr></table></figure><p>在<code>viewWillAppear:</code>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 添加一个或多个目标图像</span><br><span class="line">ARWorldTrackingConfiguration *configuration = [ARWorldTrackingConfiguration new];</span><br><span class="line">configuration.detectionImages = [ARReferenceImage referenceImagesInGroupNamed:@&quot;AR Resources&quot; bundle:nil];</span><br><span class="line"></span><br><span class="line">// 创建&apos;world-tracking&apos;配置</span><br><span class="line">[self.sceneView.session runWithConfiguration:configuration options:ARSessionRunOptionResetTracking | ARSessionRunOptionRemoveExistingAnchors];</span><br><span class="line"></span><br><span class="line">// 使用runWithConfiguration:方法使用配置运行会话</span><br><span class="line">[self.sceneView.session runWithConfiguration:configuration];</span><br></pre></td></tr></table></figure><h2 id="初始化Scene-View"><a href="#初始化Scene-View" class="headerlink" title="初始化Scene View"></a>初始化Scene View</h2><p>在<code>Main.storyboard</code>中添加<code>ARSCNView</code>,设置全屏幕约束。</p><p>在<code>viewDidLoad</code>中初始化sceneView：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.sceneView.delegate = self;</span><br><span class="line">SCNScene *scene = [SCNScene new];</span><br><span class="line">self.sceneView.scene = scene;</span><br></pre></td></tr></table></figure><h2 id="可视化图像结果"><a href="#可视化图像结果" class="headerlink" title="可视化图像结果"></a>可视化图像结果</h2><p>在前文中我们已经添加了识别的目标图像，当应用程序检测到目标图像时我们需要可视化图像结果，根据当前目标，我们在目标图像上播放视频。</p><p>在这里，需要实现ARSCNViewDelegate中的代理方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - ARSCNViewDelegate</span><br><span class="line"></span><br><span class="line">- (void)renderer:(id&lt;SCNSceneRenderer&gt;)renderer didAddNode:(SCNNode *)node forAnchor:(ARAnchor *)anchor &#123;</span><br><span class="line">ARImageAnchor *imageAnchor = (ARImageAnchor *)anchor;</span><br><span class="line"></span><br><span class="line">// 获取参考图片对象</span><br><span class="line">ARReferenceImage *referenceImage = imageAnchor.referenceImage;</span><br><span class="line">// 根据图片对象播放对应视频</span><br><span class="line">if (referenceImage.name) &#123;</span><br><span class="line">NSString *fileName = referenceImage.name;</span><br><span class="line">[self setFileForPlayerWithFileName:fileName];</span><br><span class="line"></span><br><span class="line">SCNNode *tempNode = [SCNNode new];</span><br><span class="line">CGFloat imageWidth = referenceImage.physicalSize.width;</span><br><span class="line">CGFloat imageHeight = referenceImage.physicalSize.height;</span><br><span class="line"></span><br><span class="line">SCNBox *bgBox = [SCNBox boxWithWidth:imageWidth height:imageHeight length:0.01 chamferRadius:0];</span><br><span class="line">tempNode.geometry = bgBox;</span><br><span class="line">tempNode.eulerAngles = SCNVector3Make(-M_PI/2.0, 0.0, 0.0);</span><br><span class="line">tempNode.opacity = 1.0;</span><br><span class="line"></span><br><span class="line">SCNMaterial *material = [[SCNMaterial alloc] init];</span><br><span class="line">material.diffuse.contents = self.player;</span><br><span class="line">tempNode.geometry.materials = @[material];</span><br><span class="line">[self.player play];</span><br><span class="line"></span><br><span class="line">[node addChildNode:tempNode];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setFileForPlayerWithFileName:(NSString *)fileName &#123;</span><br><span class="line">NSString *urlStr = [[NSBundle mainBundle] pathForResource:fileName ofType:@&quot;mp4&quot;];</span><br><span class="line">NSURL *url = [NSURL fileURLWithPath:urlStr];</span><br><span class="line">AVPlayerItem *playerItem = [AVPlayerItem playerItemWithURL:url];</span><br><span class="line">self.player = [[AVPlayer alloc] initWithPlayerItem:playerItem];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们就能简单地实现利用ARKit识别图像并播放对应的视频。</p><p>为了更加清楚的展现，附上代码以供参考：<a href="https://github.com/fusugz/RecognizingImagesToPlayVideo" target="_blank" rel="noopener">RecognizingImagesToPlayVideo</a></p><p>其中的视频文件可前往<a href="http://img.dpm.org.cn/Uploads/File/2018/04/19/haitang.mp4" target="_blank" rel="noopener">这里</a>下载，当然，你也可以相应修改项目中配置更换你的目标图像和视频文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2251123-7af2c7a08693ad96.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
      <category term="ARKit" scheme="https://fusugz.github.io/categories/ARKit/"/>
    
    
      <category term="ARKit" scheme="https://fusugz.github.io/tags/ARKit/"/>
    
  </entry>
  
  <entry>
    <title>iOS基础知识整理之Notification Center</title>
    <link href="https://fusugz.github.io/2018/11/09/notification-center/"/>
    <id>https://fusugz.github.io/2018/11/09/notification-center/</id>
    <published>2018-11-09T02:53:51.000Z</published>
    <updated>2018-11-09T02:56:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Notification-Center"><a href="#Notification-Center" class="headerlink" title="Notification Center"></a>Notification Center</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>通过通知中心向所有注册观察者广播的信息容器<br>它是一个单例对象，允许当事情发生时通知一些对象，让对象作出相应反应。<br>它允许我们在低程度耦合的情况下，满足控制器与一个任意的对象进行通信的目的。<br>这种模式的基本特征是为了让其他的对象能够接收到某种事件传递过来的通知，主要使用通知名称来发送和接收通知。<br>基本上不用考虑其他影响因素，只需要使用同样的通知名称，监听该通知的对象（即观察者）再对通知做出反应即可。</p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1.优点"></a>1.优点</h3><ul><li><p>代码简短，实现简单；</p></li><li><p>对于一个发出的通知，多个对象能够做出反应，简单实现一对多的方式，较之于Delegate可以实现更大跨度的通信机制；</p></li><li><p>能够通过object和userInfo传递参数，object和userInfo可以携带发送通知时传递的信息。</p></li></ul><h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2.缺点"></a>2.缺点</h3><ul><li><p>在编译期间不会检查通知是否能够被观察者正确处理；</p></li><li><p>在释放通知的观察者时，需要在通知中心移除观察者；</p></li><li><p>在调试的时候通知传递的过程很难控制和跟踪；</p></li><li><p>发送通知和接收通知的时候必须保持通知名称一致；</p></li><li><p>通知发出后，不能从观察者获得任何反馈信息。</p></li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="1-不传参数"><a href="#1-不传参数" class="headerlink" title="1.不传参数"></a>1.不传参数</h3><p>发送通知</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[[NSNotificationCenter defaultCenter] postNotificationName:@&quot;notificationWithoutParameter&quot; object:nil];</span><br></pre></td></tr></table></figure><p>监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(notiWithoutParam) name:@&quot;notificationWithoutParameter&quot; object:nil];</span><br></pre></td></tr></table></figure><p>调用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(notiWithoutParam) name:@&quot;notificationWithoutParameter&quot; object:nil];</span><br></pre></td></tr></table></figure><h3 id="2-使用object传递参数"><a href="#2-使用object传递参数" class="headerlink" title="2.使用object传递参数"></a>2.使用object传递参数</h3><p>发送通知</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NSString *object = @&quot;notiObject&quot;;</span><br><span class="line"></span><br><span class="line">[[NSNotificationCenter defaultCenter] postNotificationName:@&quot;notificationWithObject&quot; object:object];</span><br></pre></td></tr></table></figure><p>监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(notiWithObject:) name:@&quot;notificationWithObject&quot; object:nil];</span><br></pre></td></tr></table></figure><p>调用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (void)notiWithObject:(NSNotification *)notiication &#123;</span><br><span class="line"></span><br><span class="line">    id object = notiication.object;</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;Received the notification with object&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-使用userInfo传递参数"><a href="#3-使用userInfo传递参数" class="headerlink" title="3.使用userInfo传递参数"></a>3.使用userInfo传递参数</h3><p>发送通知</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NSDictionary *userInfoDict = @&#123;@&quot;userInfo&quot;:@&quot;130293739&quot;&#125;;</span><br><span class="line"></span><br><span class="line">[[NSNotificationCenter defaultCenter] postNotificationName:@&quot;notificationWithUserInfo&quot; object:nil userInfo:userInfoDict];</span><br></pre></td></tr></table></figure><p>监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(notiWithUserInfo:) name:@&quot;notificationWithUserInfo&quot; object:nil];</span><br></pre></td></tr></table></figure><p>调用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (void)notiWithUserInfo:(NSNotification *)notiication &#123;</span><br><span class="line"></span><br><span class="line">    NSDictionary *userInfo = notiication.userInfo;</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;Received the notification with userInfo:%@&quot;,userInfo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Notification-Center&quot;&gt;&lt;a href=&quot;#Notification-Center&quot; class=&quot;headerlink&quot; title=&quot;Notification Center&quot;&gt;&lt;/a&gt;Notification Center&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://fusugz.github.io/categories/Objective-C/"/>
    
    
      <category term="NSNotificationCenter" scheme="https://fusugz.github.io/tags/NSNotificationCenter/"/>
    
  </entry>
  
  <entry>
    <title>iOS基础知识整理之事件传递响应链</title>
    <link href="https://fusugz.github.io/2018/11/09/responder-chain/"/>
    <id>https://fusugz.github.io/2018/11/09/responder-chain/</id>
    <published>2018-11-09T02:48:55.000Z</published>
    <updated>2018-11-09T02:53:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件传递响应链"><a href="#事件传递响应链" class="headerlink" title="事件传递响应链"></a>事件传递响应链</h1><h2 id="UIResponder"><a href="#UIResponder" class="headerlink" title="UIResponder"></a>UIResponder</h2><p>在iOS中，能够响应事件的对象都是UIResponder的子类对象。UIResponder提供了四个点击的回调方法，分别对应用户点击开始、移动、结束和取消，其中只有在程序强制退出或者来电时，取消点击事件才会调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)touchesEnded:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)touchesMoved:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)touchesCancelled:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;&#125;</span><br></pre></td></tr></table></figure><p>##1. 响应链的传递</p><p>iOS应用程序加载时会先执行main函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line"></span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line"></span><br><span class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依次加载：UIApplication-&gt;AppDelegate-&gt;UIWindow-&gt;UIViewController-&gt;superView-&gt;subviews</p><p>关系为：[UIApplication sharedApplication].keyWindow.rootViewController.view.subviews</p><h3 id="事件的产生和传递"><a href="#事件的产生和传递" class="headerlink" title="事件的产生和传递"></a>事件的产生和传递</h3><ul><li><p>发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中。</p></li><li><p>UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常先发送事件给应用程序主窗口（keyWindow）。</p></li><li><p>主窗口会在视图层次结构中找到一个最适合的视图来处理当前触摸事件，这也是整个事件处理过程的第一步。</p></li><li><p>找到合适的视图控件后，就会调用视图控件的touches方法来做具体事件的处理。</p></li></ul><h2 id="2-Hit-Testing机制"><a href="#2-Hit-Testing机制" class="headerlink" title="2. Hit-Testing机制"></a>2. Hit-Testing机制</h2><p>iOS使用Hit-Testing寻找触摸的view。 Hit-Testing通过检查触摸点是否在关联的view边界内，如果在，则递归地（recursively）检查该view的所有子view。在层级上处于最近且边界范围包含触摸点的view成为hit-test view。确定hit-test view后，它传递触摸事件给该view。</p><p>重写<code>hitTest</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    // 1.判断当前控件能否接收事件</span><br><span class="line"></span><br><span class="line">    if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt;= 0.01) return nil;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    // 2. 判断点在不在当前控件</span><br><span class="line"></span><br><span class="line">    if ([self pointInside:point withEvent:event] == NO) return nil;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    // 3.从后往前遍历自己的子控件</span><br><span class="line"></span><br><span class="line">    NSInteger count = self.subviews.count;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    for (NSInteger i = count - 1; i &gt;= 0; i--) &#123;</span><br><span class="line"></span><br><span class="line">        UIView *childView = self.subviews[i];</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        // 把当前控件上的坐标系转换成子控件上的坐标系</span><br><span class="line"></span><br><span class="line">        CGPoint childP = [self convertPoint:point toView:childView];</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        UIView *fitView = [childView hitTest:childP withEvent:event];</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        if (fitView) &#123; // 寻找到最合适的view</span><br><span class="line"></span><br><span class="line">            return fitView;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    // 循环结束,表示没有比自己更合适的view</span><br><span class="line"></span><br><span class="line">    return self;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应链的事件传递过程"><a href="#响应链的事件传递过程" class="headerlink" title="响应链的事件传递过程"></a>响应链的事件传递过程</h3><ul><li><p>如果当前view的控制器存在，就传递给控制器；如果控制器不存在，则将其传给它的父视图。</p></li><li><p>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，此时会将事件或消息传递给window对象进行处理。</p></li><li><p>如果window对象也不处理，则将事件或消息传递给UIApplication对象。</p></li><li><p>如果UIApplication也不能处理该事件或消息，则将其丢弃。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件传递响应链&quot;&gt;&lt;a href=&quot;#事件传递响应链&quot; class=&quot;headerlink&quot; title=&quot;事件传递响应链&quot;&gt;&lt;/a&gt;事件传递响应链&lt;/h1&gt;&lt;h2 id=&quot;UIResponder&quot;&gt;&lt;a href=&quot;#UIResponder&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOS" scheme="https://fusugz.github.io/categories/iOS/"/>
    
    
      <category term="responder-chain" scheme="https://fusugz.github.io/tags/responder-chain/"/>
    
  </entry>
  
  <entry>
    <title>iOS基础知识整理之多线程技术</title>
    <link href="https://fusugz.github.io/2018/11/09/multithreading/"/>
    <id>https://fusugz.github.io/2018/11/09/multithreading/</id>
    <published>2018-11-09T02:44:05.000Z</published>
    <updated>2018-11-09T02:45:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程技术"><a href="#多线程技术" class="headerlink" title="多线程技术"></a>多线程技术</h1><h2 id="多线程（multithreading）"><a href="#多线程（multithreading）" class="headerlink" title="多线程（multithreading）"></a>多线程（multithreading）</h2><p>是指软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li><p>同一时间，CPU只能处理一条线程，只有一条线程在工作。</p></li><li><p>多线程并发执行，其实是CPU快速地在多线程之间调度（切换）。</p></li><li><p>如果CPU调度线程的时间足够快，就造成了多线程并发执行的假象（CPU并不是真正的同时执行多个任务）。</p></li></ul><h2 id="多线程技术方案对比"><a href="#多线程技术方案对比" class="headerlink" title="多线程技术方案对比"></a>多线程技术方案对比</h2><table><thead><tr><th>多线程技术方案</th><th>简介</th><th>语言</th><th>线程生命周期</th><th>使用频率</th></tr></thead><tbody><tr><td>pthread</td><td>一套通用的多线程API；适用于Unix/Linux/Windows等系统；跨平台，可移植；使用难度大</td><td>C</td><td>程序员管理</td><td>几乎不用</td></tr><tr><td>NSThread</td><td>使用更加面向对象；简单易用，可直接操作线程对象</td><td>OC</td><td>程序员管理</td><td>偶尔使用</td></tr><tr><td>GCD</td><td>旨在替代NSThread等线程技术；充分利用设备的多核</td><td>C</td><td>自动管理</td><td>经常使用</td></tr><tr><td>NSOperation</td><td>基于GCD（底层是GCD）；比GCD多了一些简单实用的功能；使用更加面向对象</td><td>OC</td><td>自动管理</td><td>经常使用</td></tr></tbody></table><h2 id="多线程技术方案实现"><a href="#多线程技术方案实现" class="headerlink" title="多线程技术方案实现"></a>多线程技术方案实现</h2><h3 id="1-NSThread"><a href="#1-NSThread" class="headerlink" title="1. NSThread"></a>1. NSThread</h3><blockquote><p>（1）使用NSThread对象建立一个线程非常方便；<br>（2）使用NSThread管理多个线程非常困难，不推荐使用；<br>（3）使用[NSThread currentThread]获得任务所在线程，适用于这三种技术。</p></blockquote><h3 id="2-GCD（Grand-Central-Dispatch）"><a href="#2-GCD（Grand-Central-Dispatch）" class="headerlink" title="2. GCD（Grand Central Dispatch）"></a>2. GCD（Grand Central Dispatch）</h3><blockquote><p>（1）是基于C语言的底层API，可用于多核并行计算；<br>（2）用Block定义任务，使用起来非常灵活，GCD会自动管理线程的生命周期（创建线程、调度任务、销毁线程）；<br>（3）提供了更多的控制能力以及操作队列中所不能使用的底层函数。</p></blockquote><h4 id="任务与队列"><a href="#任务与队列" class="headerlink" title="任务与队列"></a>任务与队列</h4><ol><li>任务</li></ol><p>即需要执行的操作，在GCD中任务是放在block里。执行的方式有两种：同步（sync）与异步（async），两者的主要区别在于是否具备开启新线程的能力。</p><ul><li>同步（sync）</li></ul><blockquote><p>同步添加任务到指定的队列中，在队列中的正在执行的任务执行结束之前，会一直等待，直到该任务在所在队列中优先级高于本身的任务执行完毕之后才能开始执行。<br>不具备开启新线程的能力。</p></blockquote><ul><li>异步（async）</li></ul><blockquote><p>异步添加任务到指定的队列中，无需等待即可直接执行。<br>具备开启新线程的能力。</p></blockquote><ol><li>队列</li></ol><p>即执行任务的等待队列，用来存放任务的队列。队列是一种特殊的线性表，采用FIFO（先进先出）的原则。</p><p>在GCD中队列分为串行队列（Serial Dispatch Queue）和并行队列（Concurrent Dispatch Queue）两种，两者的主要区别是：执行的顺序不同，开启线程数不同。</p><ul><li>串行队列</li></ul><blockquote><p>每次只有一个任务被执行，让任务一个接着一个执行。（只开启一个子线程）</p></blockquote><ul><li>并行队列</li></ul><blockquote><p>可以让多个任务并发执行。（可以开启多个线程，并且同时执行任务）</p></blockquote><p><strong>注意：并发队列的并发功能只有在异步下才有效</strong></p><h3 id="3-NSOperation"><a href="#3-NSOperation" class="headerlink" title="3. NSOperation"></a>3. NSOperation</h3><blockquote><p>（1）是使用GCD实现的一套Objective-C的API；<br>（2）是面向对象的线程技术；<br>（3）提供了一些GCD中不容易实现的特性，如：现在最大并发数量、操作之间的依赖关系。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多线程技术&quot;&gt;&lt;a href=&quot;#多线程技术&quot; class=&quot;headerlink&quot; title=&quot;多线程技术&quot;&gt;&lt;/a&gt;多线程技术&lt;/h1&gt;&lt;h2 id=&quot;多线程（multithreading）&quot;&gt;&lt;a href=&quot;#多线程（multithreading）&quot; c
      
    
    </summary>
    
    
      <category term="multithreading" scheme="https://fusugz.github.io/tags/multithreading/"/>
    
  </entry>
  
  <entry>
    <title>iOS基础知识整理之修饰符的使用和区别</title>
    <link href="https://fusugz.github.io/2018/11/09/oc-modifiers/"/>
    <id>https://fusugz.github.io/2018/11/09/oc-modifiers/</id>
    <published>2018-11-09T02:38:51.000Z</published>
    <updated>2018-11-09T02:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修饰符的使用和区别"><a href="#修饰符的使用和区别" class="headerlink" title="修饰符的使用和区别"></a>修饰符的使用和区别</h1><p>在ARC环境下，修饰符有assign，strong，weak，copy，readwrite，readonly，nonatomic，atomic</p><h2 id="属性修饰符对引用计数（retainCount）的影响"><a href="#属性修饰符对引用计数（retainCount）的影响" class="headerlink" title="属性修饰符对引用计数（retainCount）的影响"></a>属性修饰符对引用计数（retainCount）的影响</h2><blockquote><ol><li>alloc为对象分配内存，retainCount为1；</li><li>retain,retainCount+1；</li><li>copy一个对象变成另一个对象，retainCount为1，原有对象计数不变；</li><li>release，etainCount-1；</li><li>autorelease，retainCount-1。</li></ol></blockquote><h2 id="assign、retain、copy分别对应的setter方法"><a href="#assign、retain、copy分别对应的setter方法" class="headerlink" title="assign、retain、copy分别对应的setter方法"></a>assign、retain、copy分别对应的setter方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// assign</span><br><span class="line">- (void)setAssignObject:(id)newValue &#123;</span><br><span class="line">assignObject = newValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// retain </span><br><span class="line">- (void)setRetainObject:(id)newValue &#123;</span><br><span class="line">if (retainObject != newValue) &#123;</span><br><span class="line">[retainObject release];</span><br><span class="line">retainObject = [newValue retain];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// copy</span><br><span class="line">- (void)setCopyObject:(id)newValue &#123;</span><br><span class="line">if (copyObject != newValue) &#123;</span><br><span class="line">[copyObjectrelease];</span><br><span class="line">copyObject = [newValuecopy];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nonatomic和atomic的区别"><a href="#nonatomic和atomic的区别" class="headerlink" title="nonatomic和atomic的区别"></a>nonatomic和atomic的区别</h2><p>atomic为默认属性，多线程安全，这个属性是为了保证程序在多线程情况下，编译器自动生成一些互斥加锁代码，避免该变量的读写不同步问题，对性能的消耗非常大；<br>nonatomic：禁止多线程，变量保护，提高性能。如果该对象无需考虑多线程的情况，建议加入此属性，这样会让编译器少产生一些互斥加锁代码，可以在一定程度上提高效率。</p><h2 id="readwrite和readonly的区别"><a href="#readwrite和readonly的区别" class="headerlink" title="readwrite和readonly的区别"></a>readwrite和readonly的区别</h2><p>readonly表示这个属性是只读的，就是只生成 getter方法，不会生成setter方法。<br>readwrite表示可读写，生成getter和setter方法。</p><h2 id="weak和strong的区别"><a href="#weak和strong的区别" class="headerlink" title="weak和strong的区别"></a>weak和strong的区别</h2><p>默认情况下，一个指针都会使用strong属性，表明这是一个强引用。这意味着，只要引用存在，对象就不能被销毁。<br>weak是弱引用，使用weak修饰主要是为了解决循环引用的问题。</p><ol><li>在修饰代理属性的时候使用weak；</li><li>通过连线方式创建控件时用weak；</li><li>在block中，为避免循环引用，使用weak修饰self，__weak typeof(self) weakSelf = self。</li></ol><h2 id="copy和strong的区别"><a href="#copy和strong的区别" class="headerlink" title="copy和strong的区别"></a>copy和strong的区别</h2><p>当源字符串是NSString时，由于字符是不可变的，不论strong还是copy属性，都是指向源对象，copy操作只是做了次浅拷贝。<br>当源字符串是NSMutableString时，strong属性只是增加了源字符串的引用计数，而copy属性则是对源字符串做了次深拷贝，产生了一个新的对象，且copy属性对象指向这个新的对象。另外需要注意的是，这个copy的属性对象的类型始终是NSString，而不是NSMutableString，因此其是不可变的。这里strong属性只是单纯增加对象的引用计数，而copy操作则进行了一次深拷贝，所以性能上有所差异。</p><h2 id="assign和weak的区别"><a href="#assign和weak的区别" class="headerlink" title="assign和weak的区别"></a>assign和weak的区别</h2><p>assign适用于基本数据类型，weak适用于NSObject对象，并且是弱引用。当assign用来修饰对象时容易造成野指针，对象一般会分配在堆上的某块内存，如果在后续的内存分配中，刚好分到了这块地址，程序就会崩溃。<br>之所以assign可以用来修饰基本数据类型，是因为基础数据类型一般分配在栈上，栈的内存会由系统自己自动处理，不会造成野指针。<br>weak修饰的对象在被释放以后，指针地址会被置为nil，所以现在一般弱引用就是用weak。</p><h2 id="block变量定义时用copy"><a href="#block变量定义时用copy" class="headerlink" title="block变量定义时用copy"></a>block变量定义时用copy</h2><p>block的循环引用并不是strong导致的，在ARC环境下，系统底层也会做一次copy操作使block从栈区复制一块内存空间到堆里，所以strong和copy在对block修饰上没有本质区别，只不过copy操作的效率高而已，一般用copy来修饰block。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;修饰符的使用和区别&quot;&gt;&lt;a href=&quot;#修饰符的使用和区别&quot; class=&quot;headerlink&quot; title=&quot;修饰符的使用和区别&quot;&gt;&lt;/a&gt;修饰符的使用和区别&lt;/h1&gt;&lt;p&gt;在ARC环境下，修饰符有assign，strong，weak，copy，readwr
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://fusugz.github.io/categories/Objective-C/"/>
    
    
      <category term="modifiers" scheme="https://fusugz.github.io/tags/modifiers/"/>
    
  </entry>
  
  <entry>
    <title>iOS基础知识整理之ViewController的生命周期</title>
    <link href="https://fusugz.github.io/2018/11/09/vc-life-circle/"/>
    <id>https://fusugz.github.io/2018/11/09/vc-life-circle/</id>
    <published>2018-11-09T02:33:46.000Z</published>
    <updated>2018-11-09T02:35:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ViewController的生命周期"><a href="#ViewController的生命周期" class="headerlink" title="ViewController的生命周期"></a>ViewController的生命周期</h1><h2 id="1-init"><a href="#1-init" class="headerlink" title="1.init"></a>1.init</h2><p>init函数并不会每次创建对象都调用，只有在这个类第一次创建对象时才会调用，做一些类的准备工作，再次创建这个类的对象，initalize方法将不会被调用，对于这个类的子类，如果实现了initialize方法，在这个子类第一次创建对象时会调用自己的initalize方法，之后不会调用，如果没有实现，那么它的父类将替它再次调用一下自己的initialize方法，以后创建也都不会再调用。因此，如果我们有一些和这个相关的全局变量，可以在这里进行初始化。</p><h2 id="2-initCoder"><a href="#2-initCoder" class="headerlink" title="2. initCoder"></a>2. initCoder</h2><p>initCoder方法和init方法相似，只是被调用的环境不一样，如果用代码进行初始化，会调用init，从nib文件或者归档进行初始化，会调用initCoder。</p><h2 id="3-loadView"><a href="#3-loadView" class="headerlink" title="3. loadView"></a>3. loadView</h2><p>loadView方法是开始加载视图的起始方法，除非手动调用，否则在ViewController的生命周期中没特殊情况只会被调用一次。</p><h2 id="4-viewDidLoad"><a href="#4-viewDidLoad" class="headerlink" title="4. viewDidLoad"></a>4. viewDidLoad</h2><p>viewDidLoad方法是我们最常用的方法的，类中成员对象和变量的初始化我们都会放在这个方法中，在类创建后，无论视图的展现或消失，这个方法也是只会在将要布局时调用一次。</p><h2 id="5-viewWillAppear"><a href="#5-viewWillAppear" class="headerlink" title="5. viewWillAppear"></a>5. viewWillAppear</h2><p>视图将要展现时会调用。</p><h2 id="6-viewWillLayoutSubviews"><a href="#6-viewWillLayoutSubviews" class="headerlink" title="6. viewWillLayoutSubviews"></a>6. viewWillLayoutSubviews</h2><p>在viewWillAppear后调用，将要对子视图进行布局。</p><h2 id="7-viewDidLayoutSubviews"><a href="#7-viewDidLayoutSubviews" class="headerlink" title="7. viewDidLayoutSubviews"></a>7. viewDidLayoutSubviews</h2><p>已经布局完成子视图。</p><h2 id="8-viewDidAppar"><a href="#8-viewDidAppar" class="headerlink" title="8. viewDidAppar"></a>8. viewDidAppar</h2><p>视图完成显示时调用。</p><h2 id="9-viewWillDisappear"><a href="#9-viewWillDisappear" class="headerlink" title="9. viewWillDisappear"></a>9. viewWillDisappear</h2><p>视图将要消失时调用。</p><h2 id="10-viewDidDisappear"><a href="#10-viewDidDisappear" class="headerlink" title="10. viewDidDisappear"></a>10. viewDidDisappear</h2><p>视图已经消失时调用。</p><h2 id="11-dealloc"><a href="#11-dealloc" class="headerlink" title="11. dealloc"></a>11. dealloc</h2><p>controller被释放时调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ViewController的生命周期&quot;&gt;&lt;a href=&quot;#ViewController的生命周期&quot; class=&quot;headerlink&quot; title=&quot;ViewController的生命周期&quot;&gt;&lt;/a&gt;ViewController的生命周期&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://fusugz.github.io/categories/Objective-C/"/>
    
    
      <category term="lifeCircle" scheme="https://fusugz.github.io/tags/lifeCircle/"/>
    
  </entry>
  
  <entry>
    <title>iOS基础知识整理之应用的生命周期</title>
    <link href="https://fusugz.github.io/2018/11/09/app-life-circle/"/>
    <id>https://fusugz.github.io/2018/11/09/app-life-circle/</id>
    <published>2018-11-09T02:28:53.000Z</published>
    <updated>2018-11-09T02:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用的生命周期"><a href="#应用的生命周期" class="headerlink" title="应用的生命周期"></a>应用的生命周期</h1><h2 id="Main函数入口"><a href="#Main函数入口" class="headerlink" title="Main函数入口"></a>Main函数入口</h2><p>UIApplicationMain</p><ol><li>从可用Storyboard文件加载用户界面</li><li>调用AppDelegate自定义代码来初始化设置</li><li>将app放入Main Run Loop环境中来响应和处理与用户交互产生的事件</li></ol><h2 id="应用程序的五种状态"><a href="#应用程序的五种状态" class="headerlink" title="应用程序的五种状态"></a>应用程序的五种状态</h2><ul><li>Not Running（非运行状态）<br>应用没有运行或被系统终止。</li><li>Inactive（前台非活动状态）<br>应用正在进入前台状态，但是还不能接受事件处理。</li><li>Active（前台活动状态）<br>应用进入前台状态，能接受事件处理</li><li>Background（后台状态）<br>应用进入后台后，依然能够执行代码，如果有可执行的代码，就会执行代码，如果没有可执行的代码活着将可执行的代码执行完毕，应用会马上进入挂起状态。有的程序经过特殊的请求后可以长期处于Background状态。</li><li>Suspended（挂起状态）<br>处于挂起的应用进入一种“冷冻”状态，不能执行代码，如果系统内存不够，系统就把挂起的程序清除掉，为前台程序提供更多的内存，应用会被终止。</li></ul><h2 id="AppDelegate的代理方法"><a href="#AppDelegate的代理方法" class="headerlink" title="AppDelegate的代理方法"></a>AppDelegate的代理方法</h2><p>作为应用程序的委托对象，AppDelegate类在应用生命周期的不同阶段会调用不同的方法。</p><table><thead><tr><th>方法</th><th>本地通知</th><th>说明</th></tr></thead><tbody><tr><td>application: didFinishLaunchingWithOptions:</td><td>UIApplicationDidFinishLaunching-Notification</td><td>应用启动并进行初始化时会调用该方法并发出通知。这个阶段会示例化根视图控制器</td></tr><tr><td>application: DidBecomeActive：</td><td>UIApplicationDidBecomeActive-Notification</td><td>应用进入前台并处于活动状态时调用该方法并发出通知，这个阶段可恢复UI的状态（例如游戏状态等）</td></tr><tr><td>application:WillResignActive：</td><td>UIApplicationWillResignActive-Notification</td><td>应用从活动状态进入到非活动状态时调用该方法并发出通知。这个阶段可以保存UI的状态（例如游戏状态等）</td></tr><tr><td>application:DidEnterBackground：</td><td>UIApplicationDidEnterBcakground-Notification</td><td>应用进入后台时调用该方法并发出通知。这个阶段可以保存用户数据，释放一些资源（例如释放数据库资源等）</td></tr><tr><td>application:WillEnterForeground：</td><td>UIApplicationWillEnterForeground-Notification</td><td>应用进入到前台，但是还没有处于活动状态时调用该方法并发出通知。这个阶段可以恢复用户数据</td></tr><tr><td>application:WillTerminate：</td><td>UIApplicationWillTerminate-Notification</td><td>应用被终止时调用该方法并发出通知，但内存清除时除外。这个阶段可以释放一些数据，也可以保存用户数据。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;应用的生命周期&quot;&gt;&lt;a href=&quot;#应用的生命周期&quot; class=&quot;headerlink&quot; title=&quot;应用的生命周期&quot;&gt;&lt;/a&gt;应用的生命周期&lt;/h1&gt;&lt;h2 id=&quot;Main函数入口&quot;&gt;&lt;a href=&quot;#Main函数入口&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="iOS" scheme="https://fusugz.github.io/categories/iOS/"/>
    
    
      <category term="application" scheme="https://fusugz.github.io/tags/application/"/>
    
  </entry>
  
  <entry>
    <title>Socket简析与iOS实现</title>
    <link href="https://fusugz.github.io/2018/11/09/socket-ios-use/"/>
    <id>https://fusugz.github.io/2018/11/09/socket-ios-use/</id>
    <published>2018-11-09T02:19:36.000Z</published>
    <updated>2018-11-09T02:21:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/2251123-382d6dedb145f607.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WebSocket"></p><h1 id="Socket的基本概念"><a href="#Socket的基本概念" class="headerlink" title="Socket的基本概念"></a>Socket的基本概念</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><blockquote><p>网络上两个程序通过一个双向通信连接实现数据交互，这种双向通信的连接叫做Socket（套接字）。</p></blockquote><h2 id="2-本质"><a href="#2-本质" class="headerlink" title="2.本质"></a>2.本质</h2><p>网络模型中应用层与TCP/IP协议族通信的中间软件抽象层，是它的一组编程接口（API），也即对TCP/IP的封装。TCP/IP也要提供可供程序员做网络开发所用的接口，即Socket编程接口。</p><p><img src="https://upload-images.jianshu.io/upload_images/2251123-097a5471af0515e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Socket的位置"></p><h2 id="3-要素"><a href="#3-要素" class="headerlink" title="3.要素"></a>3.要素</h2><p>Socket是网络通信的基石，是支持TCP/IP协议的网络通信的基本操作单元，包含进行网络通信的必须的五种信息：</p><ul><li>连接使用的协议 </li><li>本地主机的IP地址 </li><li>本地进程的协议端口</li><li>远程主机的IP地址</li><li>远程进程的协议端口</li></ul><h2 id="4-特性"><a href="#4-特性" class="headerlink" title="4.特性"></a>4.特性</h2><p>Socket可以支持不同的传输协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接；同理，当使用UDP协议进行连接时，该Socket连接就是一个UDP连接。<br>多个TCP连接或多个应用程序进程可能需要通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，计算机操作系统为应用程序与TCP/IP协议交互提供了套接字（Socket）接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。</p><h2 id="5-连接"><a href="#5-连接" class="headerlink" title="5.连接"></a>5.连接</h2><p>建立Socket连接至少需要一对套接字，分别运行于服务端（ServerSocket）和客户端（ClientSocket）。套接字直接的连接过程氛围三个步骤：</p><h3 id="Step-1-服务器监听"><a href="#Step-1-服务器监听" class="headerlink" title="Step 1 服务器监听"></a>Step 1 服务器监听</h3><p>服务端Socket始终处于等待连接状态，实时监听是否有客户端请求连接。</p><h3 id="Step-2-客户端请求"><a href="#Step-2-客户端请求" class="headerlink" title="Step 2 客户端请求"></a>Step 2 客户端请求</h3><p>客户端Socket提出连接请求，指定服务端Socket的地址和端口号，这时就可以向对应的服务端提出Socket连接请求。</p><h3 id="Step-3-连接确认"><a href="#Step-3-连接确认" class="headerlink" title="Step 3 连接确认"></a>Step 3 连接确认</h3><p>当服务端Socket监听到客户端Socket提出的连接请求时作出响应，建立一个新的进程，把服务端Socket的描述发送给客户端，该描述得到客户端确认后就可建立起Socket连接。而服务端Socket则继续处于监听状态，继续接收其他客户端Socket的请求。</p><h1 id="iOS客户端Socket的实现"><a href="#iOS客户端Socket的实现" class="headerlink" title="iOS客户端Socket的实现"></a>iOS客户端Socket的实现</h1><h2 id="1-数据流方式"><a href="#1-数据流方式" class="headerlink" title="1. 数据流方式"></a>1. 数据流方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">- (IBAction)connectToServer:(id)sender &#123;</span><br><span class="line">// 1.与服务器通过三次握手建立连接</span><br><span class="line">NSString *host = @&quot;192.168.1.58&quot;;</span><br><span class="line">int port = 1212;</span><br><span class="line"></span><br><span class="line">//创建一个socket对象</span><br><span class="line">_socket = [[GCDAsyncSocket alloc] initWithDelegate:self</span><br><span class="line">delegateQueue:dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)];</span><br><span class="line"></span><br><span class="line">NSError *error = nil;</span><br><span class="line"></span><br><span class="line">// 开始连接</span><br><span class="line">[_socket connectToHost:host</span><br><span class="line">onPort:port</span><br><span class="line">error:&amp;error];</span><br><span class="line"></span><br><span class="line">if (error) &#123;</span><br><span class="line">NSLog(@&quot;%@&quot;,error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark - Socket代理方法</span><br><span class="line">// 连接成功</span><br><span class="line">- (void)socket:(GCDAsyncSocket *)sock</span><br><span class="line">didConnectToHost:(NSString *)host</span><br><span class="line">port:(uint16_t)port &#123;</span><br><span class="line">NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 断开连接</span><br><span class="line">- (void)socketDidDisconnect:(GCDAsyncSocket *)sock</span><br><span class="line">withError:(NSError *)err &#123;</span><br><span class="line">if (err) &#123;</span><br><span class="line">NSLog(@&quot;连接失败&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">NSLog(@&quot;正常断开&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 发送数据</span><br><span class="line">- (void)socket:(GCDAsyncSocket *)sock</span><br><span class="line">didWriteDataWithTag:(long)tag &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line"></span><br><span class="line">//发送完数据手动读取，-1不设置超时</span><br><span class="line">[sock readDataWithTimeout:-1</span><br><span class="line">tag:tag];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 读取数据</span><br><span class="line">-(void)socket:(GCDAsyncSocket *)sock</span><br><span class="line">didReadData:(NSData *)data</span><br><span class="line">withTag:(long)tag &#123;</span><br><span class="line"></span><br><span class="line">NSString *receiverStr = [[NSString alloc] initWithData:data</span><br><span class="line">encoding:NSUTF8StringEncoding];</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%s %@&quot;,__func__,receiverStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-基于第三方开源库CocoaAsyncSocket"><a href="#2-基于第三方开源库CocoaAsyncSocket" class="headerlink" title="2.基于第三方开源库CocoaAsyncSocket"></a>2.基于第三方开源库<a href="https://github.com/robbiehanson/CocoaAsyncSocket" target="_blank" rel="noopener">CocoaAsyncSocket</a></h2><h3 id="2-1客户端通过地址和端口号与服务端建立Socket连接，并写入相关数据。"><a href="#2-1客户端通过地址和端口号与服务端建立Socket连接，并写入相关数据。" class="headerlink" title="2.1客户端通过地址和端口号与服务端建立Socket连接，并写入相关数据。"></a>2.1客户端通过地址和端口号与服务端建立Socket连接，并写入相关数据。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)connectToServerWithCommand:(NSString *)command</span><br><span class="line">&#123;</span><br><span class="line">_socket = [[GCDAsyncSocket alloc] initWithDelegate:self delegateQueue:dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)];</span><br><span class="line">[_socket setUserData:command];</span><br><span class="line"></span><br><span class="line">NSError *error = nil;</span><br><span class="line">[_socket connectToHost:WIFI_DIRECT_HOST onPort:WIFI_DIRECT_PORT error:&amp;error];</span><br><span class="line">if (error) &#123;</span><br><span class="line">NSLog(@&quot;__connect error:%@&quot;,error.userInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[_socket writeData:[command dataUsingEncoding:NSUTF8StringEncoding] withTimeout:10.0f tag:6];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-实现CocoaAsyncSocket的代理方法"><a href="#2-2-实现CocoaAsyncSocket的代理方法" class="headerlink" title="2.2 实现CocoaAsyncSocket的代理方法"></a>2.2 实现CocoaAsyncSocket的代理方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - Socket Delegate</span><br><span class="line"></span><br><span class="line">- (void)socket:(GCDAsyncSocket *)sock didConnectToHost:(NSString *)host port:(uint16_t)port</span><br><span class="line">&#123;</span><br><span class="line">NSLog(@&quot;Socket连接成功：%s&quot;,__func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)socketDidDisconnect:(GCDAsyncSocket *)sock withError:(NSError *)err&#123;</span><br><span class="line">if (err) &#123;</span><br><span class="line">NSLog(@&quot;连接失败&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">NSLog(@&quot;正常断开&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ([sock.userData isEqualToString:[NSString stringWithFormat:@&quot;%d&quot;,SOCKET_CONNECT_SERVER]])</span><br><span class="line">&#123;</span><br><span class="line">//服务器掉线 重新连接</span><br><span class="line">[self connectToServerWithCommand:@&quot;battery&quot;];</span><br><span class="line">&#125;else</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)socket:(GCDAsyncSocket *)sock didWriteDataWithTag:(long)tag &#123;</span><br><span class="line">NSLog(@&quot;数据发送成功：%s&quot;,__func__);</span><br><span class="line">//发送完数据手动读取，-1不设置超时</span><br><span class="line">[sock readDataWithTimeout:-1 tag:tag];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)socket:(GCDAsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag &#123;</span><br><span class="line">NSString *receiverStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class="line">NSLog(@&quot;读取数据：%s %@&quot;,__func__,receiverStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="粘包与半包"><a href="#粘包与半包" class="headerlink" title="粘包与半包"></a>粘包与半包</h2><p>关于粘包和半包，请看<a href="http://www.jb51.net/article/105278.htm" target="_blank" rel="noopener">iOS 详解Socket编程粘包、半包处理</a>。</p><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2251123-382d6dedb145f607.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
      <category term="network" scheme="https://fusugz.github.io/categories/network/"/>
    
      <category term="iOS" scheme="https://fusugz.github.io/categories/network/iOS/"/>
    
    
      <category term="iOS" scheme="https://fusugz.github.io/tags/iOS/"/>
    
      <category term="socket" scheme="https://fusugz.github.io/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>EasyAR应用之扫卡播放视频</title>
    <link href="https://fusugz.github.io/2018/11/09/easyar/"/>
    <id>https://fusugz.github.io/2018/11/09/easyar/</id>
    <published>2018-11-09T01:49:34.000Z</published>
    <updated>2018-11-09T02:16:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么选EasyAR"><a href="#为什么选EasyAR" class="headerlink" title="为什么选EasyAR"></a>为什么选EasyAR</h1><h2 id="AR的广泛应用"><a href="#AR的广泛应用" class="headerlink" title="AR的广泛应用"></a>AR的广泛应用</h2><blockquote><p>AR（Augmented Reality）即增强现实，是一种实时地计算摄影机影像的位置及角度并加上相应图像、视频、3D模型的技术，这种技术的目标是在屏幕上把虚拟世界套在现实世界并进行互动。</p></blockquote><p>近几年AR的应用越来越广泛，样式繁多的AR应用场景给app的效果提供了更多的可能，AR的互动性体验也逐渐1被广泛接受，成为用户十分喜爱并乐于尝试的功能。</p><h2 id="主流SDK"><a href="#主流SDK" class="headerlink" title="主流SDK"></a>主流SDK</h2><ul><li><p>ARToolKit</p></li><li><p>Vuforia</p></li><li><p>ARKit</p></li><li><p>ARCore</p></li><li><p>HiAR</p></li><li><p>EasyAR</p></li></ul><h2 id="EasyAR的优势"><a href="#EasyAR的优势" class="headerlink" title="EasyAR的优势"></a>EasyAR的优势</h2><p>1. 较完善的中文文档</p><p>1. 云识别</p><h1 id="使用SDK创建EasyAR工程"><a href="#使用SDK创建EasyAR工程" class="headerlink" title="使用SDK创建EasyAR工程"></a>使用SDK创建EasyAR工程</h1><h2 id="资源下载与文档查看"><a href="#资源下载与文档查看" class="headerlink" title="资源下载与文档查看"></a>资源下载与文档查看</h2><p>开发者可以登录<a href="https://www.easyar.cn" target="_blank" rel="noopener">EasyAR官网</a>查看EasyAR的服务和相关文档；</p><p>通过<a href="https://www.easyar.cn/view/download.html" target="_blank" rel="noopener">资料下载</a>可以下载相关SDK（含Unity或不含Unity）和示例程序。</p><h2 id="注册Licence-Key添加所需SDK"><a href="#注册Licence-Key添加所需SDK" class="headerlink" title="注册Licence Key添加所需SDK"></a>注册Licence Key添加所需SDK</h2><p>首先<a href="https://www.easyar.cn/view/developCenter.html#license" target="_blank" rel="noopener">注册Licence Key</a>，添加SDK到工程中。</p><p>所需添加其他库如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/2251123-84ed3b8b738430b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加库"></p><h2 id="运行示例程序"><a href="#运行示例程序" class="headerlink" title="运行示例程序"></a>运行示例程序</h2><p>从官网下载的示例程序必须运行在真机上，且需要将Enable Bitcode设置为NO。</p><p><img src="https://upload-images.jianshu.io/upload_images/2251123-f289aed7aac1fc6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置Bitcode"></p><h1 id="实现扫描实物播放对应视频功能"><a href="#实现扫描实物播放对应视频功能" class="headerlink" title="实现扫描实物播放对应视频功能"></a>实现扫描实物播放对应视频功能</h1><p>该功能基于模式识别和AR技术，官方示例程序中的HelloARVideo已经实现了根据本地图片识别播放对应视频的功能。在此基础上，本博客旨在灵活运用EasyAR的相关功能，按类别将所要识别的目标图片储存于云端，用户可按需主动获取相关资源文件，在获取目标图片的基础下实现识别并在线播放对应视频的功能。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><h3 id="1-从服务端下载目标图片压缩包并解压"><a href="#1-从服务端下载目标图片压缩包并解压" class="headerlink" title="1. 从服务端下载目标图片压缩包并解压"></a>1. 从服务端下载目标图片压缩包并解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (void)downloadFileWithURL:(NSURL *)URL &#123;</span><br><span class="line"></span><br><span class="line">    NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];</span><br><span class="line"></span><br><span class="line">    AFURLSessionManager *mannager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];</span><br><span class="line"></span><br><span class="line">    NSURLRequest *request = [NSURLRequest requestWithURL:URL];</span><br><span class="line"></span><br><span class="line">    MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES];</span><br><span class="line"></span><br><span class="line">    hud.mode = MBProgressHUDModeAnnularDeterminate;</span><br><span class="line"></span><br><span class="line">    hud.label.text = @&quot;正在更新资源包…&quot;;</span><br><span class="line"></span><br><span class="line">    _downloadTask = [mannager downloadTaskWithRequest:request progress:^(NSProgress * _Nonnull downloadProgress) &#123;</span><br><span class="line"></span><br><span class="line">        if (downloadProgress) &#123;</span><br><span class="line"></span><br><span class="line">            CGFloat currentProgress = (CGFloat)downloadProgress.completedUnitCount / downloadProgress.totalUnitCount;</span><br><span class="line"></span><br><span class="line">            dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line"></span><br><span class="line">                hud.progress = currentProgress;</span><br><span class="line"></span><br><span class="line">                hud.label.text = [NSString stringWithFormat:@&quot;正在更新资源包:%.0f%%\n&quot;,currentProgress * 100];</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            NSLog(@&quot;%@&quot;,[NSString stringWithFormat:@&quot;当前进度为：%.2f%%&quot;,currentProgress * 100]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; destination:^NSURL * _Nonnull(NSURL * _Nonnull targetPath, NSURLResponse * _Nonnull response) &#123;</span><br><span class="line"></span><br><span class="line">        // 将zip文件下载保存到沙盒的Cache路径下</span><br><span class="line"></span><br><span class="line">        NSString *cachePath = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class="line"></span><br><span class="line">        NSString *path = [cachePath stringByAppendingString:response.suggestedFilename];</span><br><span class="line"></span><br><span class="line">        return [NSURL fileURLWithPath:path];</span><br><span class="line"></span><br><span class="line">    &#125; completionHandler:^(NSURLResponse * _Nonnull response, NSURL * _Nullable filePath, NSError * _Nullable error) &#123;</span><br><span class="line"></span><br><span class="line">        [hud hideAnimated:YES];</span><br><span class="line"></span><br><span class="line">        NSString *imgFilePath = [filePath path];</span><br><span class="line"></span><br><span class="line">        NSFileManager *fileManger = [NSFileManager defaultManager];</span><br><span class="line"></span><br><span class="line">        NSString *imgaesPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];</span><br><span class="line"></span><br><span class="line">        // remove </span><br><span class="line"></span><br><span class="line">        [fileManger removeItemAtPath:imgaesPath error:nil];</span><br><span class="line"></span><br><span class="line">        [fileManger createDirectoryAtPath:imgaesPath withIntermediateDirectories:YES attributes:nil error:nil];</span><br><span class="line"></span><br><span class="line">        // unzip 将zip文件解压并保存到Document下</span><br><span class="line"></span><br><span class="line">        [SSZipArchive unzipFileAtPath:imgFilePath toDestination:imgaesPath];</span><br><span class="line"></span><br><span class="line">        // scan </span><br><span class="line"></span><br><span class="line">        ARViewController *arVC = [[ARViewController alloc] init];</span><br><span class="line"></span><br><span class="line">        [self presentViewController:arVC animated:YES completion:nil];</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    [_downloadTask resume];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-加载targets"><a href="#2-加载targets" class="headerlink" title="2. 加载targets"></a>2. 加载targets</h3><p>在<code>helloar</code>的<code>initialize</code>方法中使用<code>loadFromImage</code>方法加载目标图片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for (int i = 0; i &lt; targetCount; i++) &#123;</span><br><span class="line"></span><br><span class="line">        loadFromImage(tracker, imageName,i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在中<code>loadFromImage</code>修改json生存方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NSString *documentPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];</span><br><span class="line"></span><br><span class="line">    easyar_ImageTarget * target = [easyar_ImageTarget create];</span><br><span class="line"></span><br><span class="line">    NSString * absolutePath = [documentPath stringByAppendingString:[NSString stringWithFormat:@&quot;/targets/%@&quot;,name]];</span><br><span class="line"></span><br><span class="line">    NSString *uid = [NSString stringWithFormat:@&quot;%d&quot;,index];</span><br><span class="line"></span><br><span class="line">    NSString * jstr = [@[@&quot;&#123;\n&quot;</span><br><span class="line"></span><br><span class="line">        &quot; \&quot;images\&quot; :\n&quot;</span><br><span class="line"></span><br><span class="line">        &quot; [\n&quot;</span><br><span class="line"></span><br><span class="line">        &quot; &#123;\n&quot;</span><br><span class="line"></span><br><span class="line">        &quot; \&quot;name\&quot; : \&quot;&quot;, name, @&quot;\&quot;,\n&quot;</span><br><span class="line"></span><br><span class="line">        &quot; \&quot;image\&quot; : \&quot;&quot;, absolutePath, @&quot;\&quot;,\n&quot;</span><br><span class="line"></span><br><span class="line">        &quot; \&quot;uid\&quot; : \&quot;&quot;, uid, @&quot;\&quot;\n&quot;</span><br><span class="line"></span><br><span class="line">        &quot; &#125;\n&quot;</span><br><span class="line"></span><br><span class="line">        &quot; ]\n&quot;</span><br><span class="line"></span><br><span class="line">        &quot;&#125;&quot;] componentsJoinedByString:@&quot;&quot;];</span><br><span class="line"></span><br><span class="line">    [target setup:jstr storageType:(easyar_StorageType_Assets | easyar_StorageType_Json) name:@&quot;&quot;];</span><br><span class="line"></span><br><span class="line">    [tracker loadTarget:target callback:^(easyar_Target * target, bool status) &#123;</span><br><span class="line"></span><br><span class="line">        NSLog(@&quot;load target (%d): %@ (%d)&quot;, status, [target name], [target runtimeID]);</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure><h3 id="3-根据目标图片uid指定特定视频链接"><a href="#3-根据目标图片uid指定特定视频链接" class="headerlink" title="3. 根据目标图片uid指定特定视频链接"></a>3. 根据目标图片uid指定特定视频链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if (status == easyar_TargetStatus_Tracked) &#123; // 追踪到目标</span><br><span class="line"></span><br><span class="line">            int runtimeID = [target runtimeID];</span><br><span class="line"></span><br><span class="line">            if (active_target != 0 &amp;&amp; active_target != runtimeID) &#123;</span><br><span class="line"></span><br><span class="line">                [video onLost];</span><br><span class="line"></span><br><span class="line">                video = nil;</span><br><span class="line"></span><br><span class="line">                tracked_target = 0;</span><br><span class="line"></span><br><span class="line">                active_target = 0;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (tracked_target == 0) &#123;</span><br><span class="line"></span><br><span class="line">                if (video == nil &amp;&amp; [video_renderers count] &gt; 0) &#123;</span><br><span class="line"></span><br><span class="line">                    NSString * target_uid = [target uid];</span><br><span class="line"></span><br><span class="line">                    NSArray *videoArr = @[@&quot;http://img.dpm.org.cn/Uploads/File/2018/04/19/haitang.mp4&quot;,</span><br><span class="line"></span><br><span class="line">                                          @&quot;http://img.dpm.org.cn/Uploads/File/2017/11/27/wanhean.mp4&quot;,</span><br><span class="line"></span><br><span class="line">                                          @&quot;http://img.dpm.org.cn/Uploads/File/2017/10/30/fxyxd.mp4&quot;,</span><br><span class="line"></span><br><span class="line">                                          @&quot;http://img.dpm.org.cn/Uploads/File/2017/05/03/u5909ad6a125e1.mp4&quot;,</span><br><span class="line"></span><br><span class="line">                                          @&quot;http://img.dpm.org.cn/Uploads/File/2017/05/03/u5909ad888a6c0.mp4&quot;,</span><br><span class="line"></span><br><span class="line">                                          @&quot;http://img.dpm.org.cn/Uploads/File/2017/05/03/repair_new.mp4&quot;,</span><br><span class="line"></span><br><span class="line">                                          @&quot;http://img.dpm.org.cn/Uploads/File/2017/03/22/u58d21fa8ed99a.mp4&quot;,</span><br><span class="line"></span><br><span class="line">                                          @&quot;http://img.dpm.org.cn/Uploads/File/2017/03/22/u58d21f1215622.mp4&quot;,</span><br><span class="line"></span><br><span class="line">                                          @&quot;http://img.dpm.org.cn/Uploads/File/2017/03/22/u58d21f012d948.mp4&quot;,</span><br><span class="line"></span><br><span class="line">                                          @&quot;http://img.dpm.org.cn/Uploads/File/2017/03/22/u58d21fa8ed99a.mp4&quot;,</span><br><span class="line"></span><br><span class="line">                                          @&quot;http://img.dpm.org.cn/Uploads/File/2017/03/22/u58d21f1215622.mp4&quot;,</span><br><span class="line"></span><br><span class="line">                                          @&quot;http://img.dpm.org.cn/Uploads/File/2017/03/22/u58d21f012d948.mp4&quot;];</span><br><span class="line"></span><br><span class="line">                    if ([[video_renderers objectAtIndex:[target_uid integerValue]] texid] != 0) &#123;</span><br><span class="line"></span><br><span class="line">                        NSString *urlStr = [videoArr objectAtIndex:[target_uid integerValue]];</span><br><span class="line"></span><br><span class="line">                        video = [[ARVideo alloc] init];</span><br><span class="line"></span><br><span class="line">                        [video openStreamingVideo:urlStr texid:[[video_renderers objectAtIndex:[target_uid integerValue]] texid]];</span><br><span class="line"></span><br><span class="line">                        current_video_renderer = [video_renderers objectAtIndex:[target_uid integerValue]];</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/fusugz/easyarVideo" target="_blank" rel="noopener">Demo</a>已上传至GitHub</strong>1</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么选EasyAR&quot;&gt;&lt;a href=&quot;#为什么选EasyAR&quot; class=&quot;headerlink&quot; title=&quot;为什么选EasyAR&quot;&gt;&lt;/a&gt;为什么选EasyAR&lt;/h1&gt;&lt;h2 id=&quot;AR的广泛应用&quot;&gt;&lt;a href=&quot;#AR的广泛应用&quot; class
      
    
    </summary>
    
    
      <category term="AR" scheme="https://fusugz.github.io/tags/AR/"/>
    
  </entry>
  
  <entry>
    <title>H264视频iOS硬解－基于Video Toolbox 获取RGB像素</title>
    <link href="https://fusugz.github.io/2017/11/16/h264-decode-use-video-toolbox/"/>
    <id>https://fusugz.github.io/2017/11/16/h264-decode-use-video-toolbox/</id>
    <published>2017-11-16T08:17:21.000Z</published>
    <updated>2017-11-16T08:33:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录基于Video Toolbox的H264视频流硬件解码获取RGB888像素数据的方法。</p><p><img src="http://upload-images.jianshu.io/upload_images/2251123-034f5458c6c9c699.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="h264"></p><h1 id="初始化Video-Toolbox"><a href="#初始化Video-Toolbox" class="headerlink" title="初始化Video Toolbox"></a>初始化Video Toolbox</h1><p>初始化时重点在于<code>attrs</code>中的参数,<code>attrs</code>决定了回调返回的数据，将<code>values</code>中的<code>v</code>设为<code>kCVPixelFormatType_32BGRA</code>可以在回调中得到32bit BGRA数据，另外几个常用的枚举类型有为<code>kCVPixelFormatType_420YpCbCr8Planar</code>和<code>kCVPixelFormatType_420YpCbCr8BiPlanarFullRange</code>,分别对于返回数据为YUV420和NV12。开发者尝试使用<code>kCVPixelFormatType_32RGBA</code>作为参数，测试发现回调中得不到<code>CVPixelBufferRef</code>,遂改用<code>kCVPixelFormatType_32BGRA</code>，最终达到预期。</p><p>完整参考代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(BOOL)initH264Decoder</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">if(_deocderSession) &#123;</span><br><span class="line"></span><br><span class="line">return YES;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const uint8_t* const parameterSetPointers[2] = &#123; _sps, _pps &#125;;</span><br><span class="line"></span><br><span class="line">const size_t parameterSetSizes[2] = &#123; _spsSize, _ppsSize &#125;;</span><br><span class="line"></span><br><span class="line">OSStatus status = CMVideoFormatDescriptionCreateFromH264ParameterSets(kCFAllocatorDefault,</span><br><span class="line"></span><br><span class="line">2, //param count</span><br><span class="line"></span><br><span class="line">parameterSetPointers,</span><br><span class="line"></span><br><span class="line">parameterSetSizes,</span><br><span class="line"></span><br><span class="line">4, //nal start code size</span><br><span class="line"></span><br><span class="line">&amp;_decoderFormatDescription);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(status == noErr) &#123;</span><br><span class="line"></span><br><span class="line">CFDictionaryRef attrs = NULL;</span><br><span class="line"></span><br><span class="line">const void *keys[] = &#123; kCVPixelBufferPixelFormatTypeKey &#125;;</span><br><span class="line"></span><br><span class="line">//      kCVPixelFormatType_420YpCbCr8Planar is YUV420</span><br><span class="line"></span><br><span class="line">//      kCVPixelFormatType_420YpCbCr8BiPlanarFullRange is NV12</span><br><span class="line"></span><br><span class="line">uint32_t v = kCVPixelFormatType_32BGRA;</span><br><span class="line"></span><br><span class="line">const void *values[] = &#123; CFNumberCreate(NULL, kCFNumberSInt32Type, &amp;v) &#125;;</span><br><span class="line"></span><br><span class="line">attrs = CFDictionaryCreate(NULL, keys, values, 1, NULL, NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VTDecompressionOutputCallbackRecord callBackRecord;</span><br><span class="line"></span><br><span class="line">callBackRecord.decompressionOutputCallback = didDecompress;</span><br><span class="line"></span><br><span class="line">callBackRecord.decompressionOutputRefCon = NULL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">status = VTDecompressionSessionCreate(kCFAllocatorDefault,</span><br><span class="line"></span><br><span class="line">_decoderFormatDescription,</span><br><span class="line"></span><br><span class="line">NULL, attire</span><br><span class="line"></span><br><span class="line">&amp;callBackRecord,</span><br><span class="line"></span><br><span class="line">&amp;_deocderSession);</span><br><span class="line"></span><br><span class="line">CFRelease(attires</span><br><span class="line"></span><br><span class="line">DDLogDebug(@&quot;Current status:%d&quot;, (int)status);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">DDLogDebug(@&quot;IOS8VT: reset decoder session failed status=%d&quot;, (int)status);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return YES;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解码与处理回调"><a href="#解码与处理回调" class="headerlink" title="解码与处理回调"></a>解码与处理回调</h1><p>在子线程中处理解码逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line"></span><br><span class="line">[self decodeFile:fileName fileExt:@&quot;h264&quot;];</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>decodeFile:fileExt:</code>方法体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(void)decodeFile:(NSString*)fileName fileExt:(NSString*)fileExt</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">NSInteger nalIndex = 0;</span><br><span class="line"></span><br><span class="line">CFAbsoluteTime startTime =CFAbsoluteTimeGetCurrent();</span><br><span class="line"></span><br><span class="line">NSString *path = [[NSBundle mainBundle] pathForResource:fileName ofType:fileExt];</span><br><span class="line"></span><br><span class="line">MEVideoFileParser *parser = [MEVideoFileParser alloc];</span><br><span class="line"></span><br><span class="line">[parser open:path];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DDLogDebug(@&quot;Decode start&quot;);</span><br><span class="line"></span><br><span class="line">VideoPacket *vp = nil;</span><br><span class="line"></span><br><span class="line">while(true) &#123;</span><br><span class="line"></span><br><span class="line">vp = [parser nextPacket];</span><br><span class="line"></span><br><span class="line">if(vp == nil) &#123;</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uint32_t nalSize = (uint32_t)(vp.size - 4);</span><br><span class="line"></span><br><span class="line">uint8_t *pNalSize = (uint8_t*)(&amp;nalSize);</span><br><span class="line"></span><br><span class="line">vp.buffer[0] = *(pNalSize + 3);</span><br><span class="line"></span><br><span class="line">vp.buffer[1] = *(pNalSize + 2);</span><br><span class="line"></span><br><span class="line">vp.buffer[2] = *(pNalSize + 1);</span><br><span class="line"></span><br><span class="line">vp.buffer[3] = *(pNalSize);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CVPixelBufferRef pixelBuffer = NULL;</span><br><span class="line"></span><br><span class="line">int nalType = vp.buffer[4] &amp; 0x1F;</span><br><span class="line"></span><br><span class="line">DDLogDebug(@&quot;Nal type is %d&quot;,nalType);</span><br><span class="line"></span><br><span class="line">switch (nalType) &#123;</span><br><span class="line"></span><br><span class="line">case 0x05:</span><br><span class="line"></span><br><span class="line">//Nal type is IDR frame</span><br><span class="line"></span><br><span class="line">if([self initH264Decoder]) &#123;</span><br><span class="line"></span><br><span class="line">pixelBuffer = [self decode:vp];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case 0x07:</span><br><span class="line"></span><br><span class="line">//Nal type is SPS</span><br><span class="line"></span><br><span class="line">_spsSize = vp.size - 4;</span><br><span class="line"></span><br><span class="line">_sps = malloc(_spsSize);</span><br><span class="line"></span><br><span class="line">memcpy(_sps, vp.buffer + 4, _spsSize);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case 0x08:</span><br><span class="line"></span><br><span class="line">//Nal type is PPS</span><br><span class="line"></span><br><span class="line">_ppsSize = vp.size - 4;</span><br><span class="line"></span><br><span class="line">_pps = malloc(_ppsSize);</span><br><span class="line"></span><br><span class="line">memcpy(_pps, vp.buffer + 4, _ppsSize);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">default:</span><br><span class="line"></span><br><span class="line">//Nal type is B/P frame</span><br><span class="line"></span><br><span class="line">pixelBuffer = [self decode:vp];</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(pixelBuffer) &#123;</span><br><span class="line"></span><br><span class="line">dispatch_sync(dispatch_get_main_queue(), ^&#123;</span><br><span class="line"></span><br><span class="line">// 播放</span><br><span class="line"></span><br><span class="line">//_glLayer.pixelBuffer = pixelBuffer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 对CVPixelBufferRef进行处理，获取RBG像素数据</span><br><span class="line"></span><br><span class="line">[self writePixelBuffer:pixelBuffer];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 后续操作……</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CVPixelBufferRelease(pixelBuffer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nalIndex++;</span><br><span class="line"></span><br><span class="line">DDLogDebug(@&quot;Read Nalu size %ld&quot;, (long)vp.size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CFAbsoluteTime linkTime = (CFAbsoluteTimeGetCurrent() - startTime);</span><br><span class="line"></span><br><span class="line">DDLogDebug(@&quot;Ellapse %f ms,frame count:%ld&quot;, linkTime * 1000.0,(long)nalIndex);</span><br><span class="line"></span><br><span class="line">DDLogDebug(@&quot;Decode end&quot;);</span><br><span class="line"></span><br><span class="line">[parser close];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[self clearH264Deocder];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，对VideoPacket进行解码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(CVPixelBufferRef)decode:(VideoPacket*)vp</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">CVPixelBufferRef outputPixelBuffer = NULL;</span><br><span class="line"></span><br><span class="line">CMBlockBufferRef blockBuffer = NULL;</span><br><span class="line"></span><br><span class="line">OSStatus status  = CMBlockBufferCreateWithMemoryBlock(kCFAllocatorDefault,</span><br><span class="line"></span><br><span class="line">(void*)vp.buffer, vp.size,</span><br><span class="line"></span><br><span class="line">kCFAllocatorNull,</span><br><span class="line"></span><br><span class="line">NULL, 0, vp.size,</span><br><span class="line"></span><br><span class="line">0, &amp;blockBuffer);</span><br><span class="line"></span><br><span class="line">if(status == kCMBlockBufferNoErr) &#123;</span><br><span class="line"></span><br><span class="line">CMSampleBufferRef sampleBuffer = NULL;</span><br><span class="line"></span><br><span class="line">const size_t sampleSizeArray[] = &#123;vp.size&#125;;</span><br><span class="line"></span><br><span class="line">status = CMSampleBufferCreateReady(kCFAllocatorDefault,</span><br><span class="line"></span><br><span class="line">blockBuffer,</span><br><span class="line"></span><br><span class="line">_decoderFormatDescription ,</span><br><span class="line"></span><br><span class="line">1, 0, NULL, 1, sampleSizeArray,</span><br><span class="line"></span><br><span class="line">&amp;sampleBuffer);</span><br><span class="line"></span><br><span class="line">if (status == kCMBlockBufferNoErr &amp;&amp; sampleBuffer) &#123;</span><br><span class="line"></span><br><span class="line">VTDecodeFrameFlags flags = 0;</span><br><span class="line"></span><br><span class="line">VTDecodeInfoFlags flagOut = 0;</span><br><span class="line"></span><br><span class="line">OSStatus decodeStatus = VTDecompressionSessionDecodeFrame(_deocderSession,</span><br><span class="line"></span><br><span class="line">sampleBuffer,</span><br><span class="line"></span><br><span class="line">flags,</span><br><span class="line"></span><br><span class="line">&amp;outputPixelBuffer,</span><br><span class="line"></span><br><span class="line">&amp;flagOut);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(decodeStatus == kVTInvalidSessionErr) &#123;</span><br><span class="line"></span><br><span class="line">DDLogDebug(@&quot;IOS8VT: Invalid session, reset decoder session&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else if(decodeStatus == kVTVideoDecoderBadDataErr) &#123;</span><br><span class="line"></span><br><span class="line">DDLogDebug(@&quot;IOS8VT: decode failed status=%d(Bad data)&quot;, (int)decodeStatus);</span><br><span class="line"></span><br><span class="line">&#125; else if(decodeStatus != noErr) &#123;</span><br><span class="line"></span><br><span class="line">DDLogDebug(@&quot;IOS8VT: decode failed status=%d&quot;, (int)decodeStatus);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CFRelease(sampleBuffer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CFRelease(blockBuffer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return outputPixelBuffer;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="处理CVPixelBufferRef，获取RGB像素"><a href="#处理CVPixelBufferRef，获取RGB像素" class="headerlink" title="处理CVPixelBufferRef，获取RGB像素"></a>处理<code>CVPixelBufferRef</code>，获取RGB像素</h1><p>在<code>writePixelBuffer</code>方法中，对<code>CVPixelBufferRef</code>进行处理，可得到RGB像素。Video Toolbox解码后的得到的图像数据并不能直接由CPU访问，需先用<code>CVPixelBufferLockBaseAddress()</code>锁定地址才能从主存访问，否则调用CVPixelBufferGetBaseAddressOfPlane等函数则返回NULL或无效值。值得注意的是，CVPixelBufferLockBaseAddress自身的调用并不消耗多少性能，一般情况，锁定之后，往CVPixelBuffer拷贝内存才是相对耗时的操作，比如计算内存偏移。待数据处理完毕，请记得使用<code>CVPixelBufferUnlockBaseAddress()</code> unlock地址。</p><p>¡</p><p>将<code>void *</code>的RGB数据强转为<code>unsigned char *</code>类型的<code>images</code>数据，以便用C语言代码进行后续处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)writePixelBuffer:(CVPixelBufferRef)pixelBuffer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CVPixelBufferLockBaseAddress(pixelBuffer,kCVPixelBufferLock_ReadOnly);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void * rgb_data = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer,0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">images = (unsigned char *)rgb_data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Clear"><a href="#Clear" class="headerlink" title="Clear"></a>Clear</h1><p>解码完成后，Clear H264解码器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(void)clearH264Deocder</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">if(_deocderSession) &#123;</span><br><span class="line"></span><br><span class="line">VTDecompressionSessionInvalidate(_deocderSession);</span><br><span class="line"></span><br><span class="line">CFRelease(_deocderSession);</span><br><span class="line"></span><br><span class="line">_deocderSession = NULL;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(_decoderFormatDescription) &#123;</span><br><span class="line"></span><br><span class="line">CFRelease(_decoderFormatDescription);</span><br><span class="line"></span><br><span class="line">_decoderFormatDescription = NULL;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free(_sps);</span><br><span class="line"></span><br><span class="line">free(_pps);</span><br><span class="line"></span><br><span class="line">_spsSize = _ppsSize = 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目中的实例化变量定义"><a href="#项目中的实例化变量定义" class="headerlink" title="项目中的实例化变量定义"></a>项目中的实例化变量定义</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">uint8_t *_sps;</span><br><span class="line"></span><br><span class="line">NSInteger _spsSize;</span><br><span class="line"></span><br><span class="line">uint8_t *_pps;</span><br><span class="line"></span><br><span class="line">NSInteger _ppsSize;</span><br><span class="line"></span><br><span class="line">VTDecompressionSessionRef _deocderSession;</span><br><span class="line"></span><br><span class="line">CMVideoFormatDescriptionRef _decoderFormatDescription;</span><br><span class="line"></span><br><span class="line">AAPLEAGLLayer *_glLayer;</span><br><span class="line"></span><br><span class="line">unsigned char *images;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考：iOS-Video-Toolbox：读写解码回调函数CVImageBufferRef的YUV图像"><a href="#参考：iOS-Video-Toolbox：读写解码回调函数CVImageBufferRef的YUV图像" class="headerlink" title="参考：iOS Video Toolbox：读写解码回调函数CVImageBufferRef的YUV图像"></a>参考：<a href="http://www.jianshu.com/p/dac9857b34d0" target="_blank" rel="noopener">iOS Video Toolbox：读写解码回调函数CVImageBufferRef的YUV图像</a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文记录基于Video Toolbox的H264视频流硬件解码获取RGB888像素数据的方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2251123-034f5458c6c9c699.p
      
    
    </summary>
    
      <category term="video processing" scheme="https://fusugz.github.io/categories/video-processing/"/>
    
    
      <category term="Objective-C" scheme="https://fusugz.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>基于OpenCV的iOS图像处理</title>
    <link href="https://fusugz.github.io/2017/09/07/use-opencv-on-ios/"/>
    <id>https://fusugz.github.io/2017/09/07/use-opencv-on-ios/</id>
    <published>2017-09-07T02:10:36.000Z</published>
    <updated>2017-09-07T02:37:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2251123-b1539f93bb74b474.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OpenCV for iOS"></p><h1 id="关于图片处理"><a href="#关于图片处理" class="headerlink" title="关于图片处理"></a>关于图片处理</h1><hr><p>随着科技的发展，AI、机器学习、AR、VR等已经逐渐走进生活，模式识别、图像捕捉、图片拼接等已经成为其中的重要环节。因此，图像处理技术在未来会被移动端广泛使用。其中，有很多C++的库的应用普遍，常用的有：OpenCV、FreeImage、CImg和CxImage。</p><p>关于这几个库的特点和优缺点可以参考<a href="http://dataunion.org/20307.html" target="_blank" rel="noopener">图像识别四大图像库比较</a>。</p><h1 id="关于OpenCV"><a href="#关于OpenCV" class="headerlink" title="关于OpenCV"></a>关于OpenCV</h1><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>OpenCV (Open Source Computer Vision Library)是一个在BSD许可下发布的开源库，因此它是免费提供给学术和商业用途。有C++、C、Python和Java接口，支持Windows、Linux、MacOS、iOS和Android等系统。OpenCV是为计算效率而设计的，而且密切关注实时应用程序的发展和支持。该库用优化的C/C++编写,可以应用于多核处理。在启用OpenCL的基础上，它可以利用底层的异构计算平台的硬件加速。</p></blockquote><p>——opencv.org</p><h2 id="OpenCV的模块"><a href="#OpenCV的模块" class="headerlink" title="OpenCV的模块"></a>OpenCV的模块</h2><p>从<a href="[http://docs.opencv.org/2.4/modules/core/doc/intro.html">官方文档</a>中我们可以看到其包含模块以及对iOS的支持情况。</p><blockquote><ul><li>core：简洁的核心模块，定义了基本的数据结构，包括稠密多维数组 Mat 和其他模块需要的基本函数。</li></ul></blockquote><blockquote><ul><li>imgproc：图像处理模块，包括线性和非线性图像滤波、几何图像转换 (缩放、仿射与透视变换、一般性基于表的重映射)、颜色空间转换、直方图等等。</li></ul></blockquote><blockquote><ul><li>video：视频分析模块，包括运动估计、背景消除、物体跟踪算法。</li></ul></blockquote><blockquote><ul><li>calib3d：包括基本的多视角几何算法、单体和立体相机的标定、对象姿态估计、双目立体匹配算法和元素的三维重建。</li></ul></blockquote><blockquote><ul><li>features2d：包含了显著特征检测算法、描述算子和算子匹配算法。</li></ul></blockquote><blockquote><ul><li>objdetect：物体检测和一些预定义的物体的检测 (如人脸、眼睛、杯子、人、汽车等)。</li></ul></blockquote><blockquote><ul><li>ml：多种机器学习算法，如 K 均值、支持向量机和神经网络。</li></ul></blockquote><blockquote><ul><li>highgui：一个简单易用的接口，提供视频捕捉、图像和视频编码等功能，还有简单的 UI 接口 (iOS 上可用的仅是其一个子集)。</li></ul></blockquote><blockquote><ul><li>gpu：OpenCV 中不同模块的 GPU 加速算法 (iOS 上不可用)。</li></ul></blockquote><blockquote><ul><li>ocl：使用 OpenCL 实现的通用算法 (iOS 上不可用)。</li></ul></blockquote><blockquote><ul><li>一些其它辅助模块，如 Python 绑定和用户贡献的算法。</li></ul></blockquote><h2 id="我们可以利用OpenCV在iOS上做什么"><a href="#我们可以利用OpenCV在iOS上做什么" class="headerlink" title="我们可以利用OpenCV在iOS上做什么"></a>我们可以利用OpenCV在iOS上做什么</h2><p>基于OpenCV，iOS应用程序可以实现很多有趣的功能，也可以把很多复杂的工作简单化。一般可用于：</p><ul><li><p>对图片进行灰度处理（官方示例）</p></li><li><p>人脸识别，即特征跟踪（官方示例）</p></li><li><p>训练图片特征库（可用于模式识别）</p></li><li><p>提取特定图像内容（根据需求还原有用图像信息）</p></li></ul><p>……</p><h1 id="导入OpenCV"><a href="#导入OpenCV" class="headerlink" title="导入OpenCV"></a>导入OpenCV</h1><hr><p>opencv目前分为两个版本系列：opencv2.4.x和opencv3.x。</p><p>导入项目的两种方式：</p><h2 id="1-从官网下载框架，引入工程。"><a href="#1-从官网下载框架，引入工程。" class="headerlink" title="1.从官网下载框架，引入工程。"></a>1.从官网下载框架，引入工程。</h2><ol><li><p>前往<a href="http://opencv.org" target="_blank" rel="noopener">OpenCV官网</a>或<a href="http://opencv.org.cn" target="_blank" rel="noopener">OpenCV中文官网</a>下载相关iOS版本framework文件，从项目引入，</p></li><li><p>导入OpenCV依赖库</p></li></ol><ul><li><p>libc++.tbd</p></li><li><p>AVFoundation.framework</p></li><li><p>CoreImage.framework</p></li><li><p>QuartzCore.framework</p></li><li><p>Accelerate.framework</p></li><li><p>CoreVideo.framework</p></li><li><p>CoreMedia.framework</p></li><li><p>AssetsLibrary.framework</p></li></ul><ol><li>引入相关头文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#import &lt;opencv2/opencv.hpp&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &lt;opencv2/imgproc/types_c.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &lt;opencv2/imgcodecs/ios.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &lt;opencv2/highgui/highgui_c.h&gt;</span><br></pre></td></tr></table></figure><p><strong>注：使用OpenCV的类必须支持C++的编译环境，把.m文件改为.mm即可。</strong></p><h2 id="2-使用CocoaPods安装。"><a href="#2-使用CocoaPods安装。" class="headerlink" title="2.使用CocoaPods安装。"></a>2.使用CocoaPods安装。</h2><p>很简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pod &apos;OpenCV&apos;</span><br></pre></td></tr></table></figure><h1 id="OpenCV的简单使用"><a href="#OpenCV的简单使用" class="headerlink" title="OpenCV的简单使用"></a>OpenCV的简单使用</h1><hr><p>处理图片可以创建一个UIImage的分类，OpenCV图像处理的相关代码都可以在这个类中实现。</p><p>代码可见<a href="https://github.com/fusugz/OpenCVDemo" target="_blank" rel="noopener">笔者Github项目地址</a></p><h2 id="图像灰度处理"><a href="#图像灰度处理" class="headerlink" title="图像灰度处理"></a>图像灰度处理</h2><p>1.在.h文件中声明两个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@property (nonatomic, readonly) cv::Mat CVMat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@property (nonatomic, readonly) cv::Mat CVGrayscaleMat;</span><br></pre></td></tr></table></figure><p>2.声明Mat与UIImage互相转换以及灰度处理并返回UIImage对象的外部方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat --&gt; UIImage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@return UIImage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (UIImage *)imageWithCVMat:(const cv::Mat&amp;)cvMat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UIImage --&gt; cv::Mat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@param image image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@return cv::Mat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (cv::Mat)cvMatFromUIImage:(UIImage *)image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UIImage --&gt; cv::Mat (gray)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@param image image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@return cv::Mat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (cv::Mat)cvMatGrayFromUIImage:(UIImage *)image;</span><br></pre></td></tr></table></figure><p>3.在.m中实现相关方法</p><p>生成cv::Mat对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (cv::Mat)CVMat &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGColorSpaceRef colorSpace = CGImageGetColorSpace(self.CGImage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGFloat cols = self.size.width;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGFloat rows = self.size.height;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat cvMat(rows,cols,CV_8UC(4)); // 8 bits per component,4 channels</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGContextRef contextRef = CGBitmapContextCreate(cvMat.data,                // Pointer to backing data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cols,                      // Width of bitmap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rows,                      // Height of bitmap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8,                         // Bits per conponent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cvMat.step[0],             // Bytes per row</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">colorSpace,                // Colorspace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kCGImageAlphaNoneSkipLast |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kCGBitmapByteOrderDefault);// Bitmap info flags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGContextDrawImage(contextRef, CGRectMake(0, 0, cols, rows), self.CGImage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGContextRelease(contextRef);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return cvMat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成灰度cv::Mat对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (cv::Mat)CVGrayscaleMat &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceGray();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGFloat cols = self.size.width;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGFloat rows = self.size.height;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat cvMat = cv::Mat(rows,cols,CV_8SC1); // 8 bits per conponpent,1 channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGContextRef contextRef = CGBitmapContextCreate(cvMat.data,                // Pointer to backing data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cols,                      // Width of bitmap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rows,                      // Height of bitmap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8,                         // Bits of bitmap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cvMat.step[0],             //Bytes per row</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">colorSpace,                // Colorspace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kCGImageAlphaNone |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kCGBitmapByteOrderDefault);// Bitmap info flags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGContextDrawImage(contextRef, CGRectMake(0, 0, cols, rows), self.CGImage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGContextRelease(contextRef);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGColorSpaceRelease(colorSpace);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return cvMat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cv::Mat –&gt; UIImage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ (UIImage *)imageWithCVMat:(const cv::Mat &amp;)cvMat &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return [[UIImage alloc] initWithCVMat:cvMat];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (cv::Mat)cvMatFromUIImage:(UIImage *)image &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGColorSpaceRef colorSpace = CGImageGetColorSpace(image.CGImage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGFloat cols = image.size.width;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGFloat rows = image.size.height;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat cvMat(rows, cols, CV_8UC4); // 8 bits per component, 4 channels (color channels + alpha)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGContextRef contextRef = CGBitmapContextCreate(cvMat.data,                 // Pointer to  data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cols,                       // Width of bitmap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rows,                       // Height of bitmap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8,                          // Bits per component</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cvMat.step[0],              // Bytes per row</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">colorSpace,                 // Colorspace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kCGImageAlphaNoneSkipLast |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kCGBitmapByteOrderDefault); // Bitmap info flags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGContextDrawImage(contextRef, CGRectMake(0, 0, cols, rows), image.CGImage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGContextRelease(contextRef);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return cvMat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UIimage –&gt; Gray cv::Mat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ (cv::Mat)cvMatGrayFromUIImage:(UIImage *)image &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGColorSpaceRef colorSpace = CGImageGetColorSpace(image.CGImage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGFloat cols = image.size.width;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGFloat rows = image.size.height;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat cvMat(rows, cols, CV_8UC1); // 8 bits per component, 1 channels</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGContextRef contextRef = CGBitmapContextCreate(cvMat.data,                 // Pointer to data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cols,                       // Width of bitmap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rows,                       // Height of bitmap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8,                          // Bits per component</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cvMat.step[0],              // Bytes per row</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">colorSpace,                 // Colorspace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kCGImageAlphaNoneSkipLast |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kCGBitmapByteOrderDefault); // Bitmap info flags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGContextDrawImage(contextRef, CGRectMake(0, 0, cols, rows), image.CGImage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGContextRelease(contextRef);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return cvMat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.在控制器中调用UIImage+OpenCV相关代码，实现图片灰度处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UIImage *image = [UIImage imageNamed:@&quot;icon.jpg&quot;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat inputMat = [UIImage cvMatFromUIImage:image];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat greyMat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::cvtColor(inputMat, greyMat, CV_BGR2GRAY);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//cv::Mat greyMat = [UIImage cvMatGrayFromUIImage:image];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UIImage *greyImage = [UIImage imageWithCVMat:greyMat];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">self.imageView.image = greyImage;</span><br></pre></td></tr></table></figure><p>5.效果</p><p><img src="http://upload-images.jianshu.io/upload_images/2251123-cf81da71909a46a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原图"></p><p><img src="http://upload-images.jianshu.io/upload_images/2251123-693a4d64aaea3539.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="处理后"></p><h2 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h2><p>关于人脸识别的实现，可以参考<a href="[https://objccn.io/issue-21-9/">基于OpenCV的人脸识别</a>。这是ObjC中国上一篇译文，作者是国外大牛，这片博客写得非常详尽。</p><p>我的Demo中不含有拍照部分，直接对一张图片中的人脸进行识别，其实现如下：</p><p>1.创建一个Objective-C++的类FaceRecognition（即把.m文件.mm文件，支持Objective-C与C++混编）</p><p>2.引入头文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &lt;opencv2/opencv.hpp&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &lt;opencv2/imgproc/types_c.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &lt;opencv2/imgcodecs/ios.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;UIImage+OpenCV.h&quot;</span><br></pre></td></tr></table></figure><p>3.对图片进行处理转化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (UIImage *)convertImage: (UIImage *)image &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 初始化一个图片的二维矩阵cvImage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat cvImage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 将图片UIImage对象转为Mat对象</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cvImage = [UIImage cvMatFromUIImage:image];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (!cvImage.empty()) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat gray;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 进一步将图片转为灰度显示</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::cvtColor(cvImage, gray, CV_RGB2GRAY);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 利用搞死滤镜去除边缘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::GaussianBlur(gray, gray, cv::Size(5, 5), 1.2, 1.2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 计算画布</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat edges;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Canny(gray, edges, 0, 50);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 使用白色填充</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cvImage.setTo(cv::Scalar::all(225));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 修改边缘颜色</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cvImage.setTo(cv::Scalar(0,128,255,255),edges);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 将Mat转换为UIImage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return [UIImage imageWithCVMat:cvImage];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return nil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.读取图片中人脸的相关数据并存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ (NSArray*)facePointDetectForImage:(UIImage*)image&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static cv::CascadeClassifier faceDetector;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static dispatch_once_t onceToken;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 添加xml文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSString* cascadePath = [[NSBundle mainBundle]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pathForResource:@&quot;haarcascade_frontalface_alt2&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ofType:@&quot;xml&quot;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">faceDetector.load([cascadePath UTF8String]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat faceImage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">faceImage = [UIImage cvMatFromUIImage:image];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 转为灰度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat gray;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cvtColor(faceImage, gray, CV_BGR2GRAY);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 检测人脸并储存</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">std::vector&lt;cv::Rect&gt;faces;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">faceDetector.detectMultiScale(gray, faces,1.1,2,CV_HAAR_FIND_BIGGEST_OBJECT,cv::Size(30,30));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSMutableArray *array = [NSMutableArray array];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(unsigned int i= 0;i &lt; faces.size();i++)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const cv::Rect&amp; face = faces[i];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">float height = (float)faceImage.rows;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">float width = (float)faceImage.cols;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CGRect rect = CGRectMake(face.x/width, face.y/height, face.width/width, face.height/height);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[array addObject:[NSNumber valueWithCGRect:rect]];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return [array copy];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.检测人脸并在图片上人脸部分添加红色矩形线框以标识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ (UIImage*)faceDetectForImage:(UIImage*)image &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static cv::CascadeClassifier faceDetector;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static dispatch_once_t onceToken;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSString* cascadePath = [[NSBundle mainBundle]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pathForResource:@&quot;haarcascade_frontalface_alt&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ofType:@&quot;xml&quot;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">faceDetector.load([cascadePath UTF8String]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat faceImage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">faceImage = [UIImage cvMatFromUIImage:image];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 转为灰度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Mat gray;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cvtColor(faceImage, gray, CV_BGR2GRAY);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 检测人脸并储存</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">std::vector&lt;cv::Rect&gt;faces;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">faceDetector.detectMultiScale(gray, faces,1.1,2,0,cv::Size(30,30));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 在每个人脸上画一个红色四方形</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(unsigned int i= 0;i &lt; faces.size();i++)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const cv::Rect&amp; face = faces[i];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Point tl(face.x,face.y);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Point br = tl + cv::Point(face.width,face.height);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 四方形的画法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::Scalar magenta = cv::Scalar(255, 0, 0, 255);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv::rectangle(faceImage, tl, br, magenta, 2, 2, 0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return [UIImage imageWithCVMat:faceImage];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.运行效果</p><p><img src="http://upload-images.jianshu.io/upload_images/2251123-c1e60be522f96708.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Face Recognition"></p><h1 id="Objective-C与C-混编"><a href="#Objective-C与C-混编" class="headerlink" title="Objective-C与C++混编"></a>Objective-C与C++混编</h1><hr><p>很多地方需要用到Objective-C与C++混编，来解决一些对象的传递转换问题。</p><h2 id="字符串的转换"><a href="#字符串的转换" class="headerlink" title="字符串的转换"></a>字符串的转换</h2><p>在C++中，字符串对象为<code>char *</code>,而在Objective-C中字符串对象为<code>NSString</code>,在编程中常常需要在二者之间互相转换。</p><p>1.<code>NSString</code>转换为<code>char *</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSString --&gt; char *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@param string NSString (Objective-C)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@return char *         (C++)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">char * string2Char(NSString *string) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const char *charString = [string UTF8String];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">char *result = new char[strlen(charString) + 1];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">strcpy(result, charString);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//    delete[] result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<code>char *</code>转换为<code>NSString</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NSString *OCString = [NSString stringWithUTF8String:cppString];</span><br></pre></td></tr></table></figure><h2 id="储存cv-Mat图片对象"><a href="#储存cv-Mat图片对象" class="headerlink" title="储存cv::Mat图片对象"></a>储存cv::Mat图片对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Write image to Document</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@param imageName image name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@param img cv::Mat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@return if complete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bool writeImage2Document(const char *imageName, cv::Mat img) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UIImage *stitchedImage = [[UIImage alloc] initWithCVMat:img];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSString *docPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSString *imagePath = [docPath stringByAppendingString:[NSString stringWithFormat:@&quot;/%@&quot;,[NSString stringWithUTF8String:imageName]]];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 将UIImage对象转换成NSData对象</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSData *data = UIImageJPEGRepresentation(stitchedImage, 0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[data writeToFile:imagePath atomically:YES];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return true;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><hr><p>OpenCV实在是太强大了，笔者决定潜心研究，暂不总结，所以没有总结。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2251123-b1539f93bb74b474.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
      <category term="OpenCV" scheme="https://fusugz.github.io/categories/OpenCV/"/>
    
    
      <category term="image" scheme="https://fusugz.github.io/tags/image/"/>
    
      <category term="OpenCV" scheme="https://fusugz.github.io/tags/OpenCV/"/>
    
      <category term="Recognition" scheme="https://fusugz.github.io/tags/Recognition/"/>
    
  </entry>
  
  <entry>
    <title>不得不说的iOS字体在app中的使用规范</title>
    <link href="https://fusugz.github.io/2017/08/23/iOS-font-setting/"/>
    <id>https://fusugz.github.io/2017/08/23/iOS-font-setting/</id>
    <published>2017-08-23T08:54:24.000Z</published>
    <updated>2017-08-23T09:10:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS系统家族字体（family-font）"><a href="#iOS系统家族字体（family-font）" class="headerlink" title="iOS系统家族字体（family font）"></a>iOS系统家族字体（family font）</h1><p>系统字体意味着可以不需要另外导入字体包就可以在项目中使用，而且不涉及商用版权问题。</p><p>1.系统家族字体</p><p>可通过以下代码在控制台打印出系统家族字体的个数和字体名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NSArray * nameArray = [UIFont familyNames];</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;iOS family font count:%ld&quot;,(long)[nameArray count]);</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;iOS family font list:\n&quot;);</span><br><span class="line"></span><br><span class="line">    for (NSString *fontName in nameArray) &#123;</span><br><span class="line"></span><br><span class="line">        NSLog(@&quot;---%@---&quot;,fontName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>iOS family font count:75</p></blockquote><p>iOS family font list:</p><p>—Copperplate—</p><p>—Heiti SC—</p><p>—Kohinoor Telugu—</p><p>—Thonburi—</p><p>—Heiti TC—</p><p>—Courier New—</p><p>—Gill Sans—</p><p>—Apple SD Gothic Neo—</p><p>—Marker Felt—</p><p>—Avenir Next Condensed—</p><p>—Tamil Sangam MN—</p><p>—Helvetica Neue—</p><p>—Gurmukhi MN—</p><p>—Times New Roman—</p><p>—Georgia—</p><p>—Apple Color Emoji—</p><p>—Arial Rounded MT Bold—</p><p>—Kailasa—</p><p>—Kohinoor Devanagari—</p><p>—Kohinoor Bangla—</p><p>—Chalkboard SE—</p><p>—Sinhala Sangam MN—</p><p>—PingFang TC—</p><p>—Gujarati Sangam MN—</p><p>—Damascus—</p><p>—Noteworthy—</p><p>—Geeza Pro—</p><p>—Avenir—</p><p>—Academy Engraved LET—</p><p>—Mishafi—</p><p>—Futura—</p><p>—Farah—</p><p>—Kannada Sangam MN—</p><p>—Arial Hebrew—</p><p>—Arial—</p><p>—Party LET—</p><p>—Chalkduster—</p><p>—Hoefler Text—</p><p>—Optima—</p><p>—Palatino—</p><p>—Lao Sangam MN—</p><p>—Malayalam Sangam MN—</p><p>—Al Nile—</p><p>—Bradley Hand—</p><p>—PingFang HK—</p><p>—Trebuchet MS—</p><p>—Helvetica—</p><p>—Courier—</p><p>—Cochin—</p><p>—Hiragino Mincho ProN—</p><p>—Devanagari Sangam MN—</p><p>—Oriya Sangam MN—</p><p>—Snell Roundhand—</p><p>—Zapf Dingbats—</p><p>—Bodoni 72—</p><p>—Verdana—</p><p>—American Typewriter—</p><p>—Avenir Next—</p><p>—Baskerville—</p><p>—Khmer Sangam MN—</p><p>—Didot—</p><p>—Savoye LET—</p><p>—Bodoni Ornaments—</p><p>—Symbol—</p><p>—Menlo—</p><p>—Bodoni 72 Smallcaps—</p><p>—Papyrus—</p><p>—Hiragino Sans—</p><p>—PingFang SC—</p><p>—Myanmar Sangam MN—</p><p>—Euphemia UCAS—</p><p>—Telugu Sangam MN—</p><p>—Bangla Sangam MN—</p><p>—Zapfino—</p><p>—Bodoni 72 Oldstyle—</p><p>2.family font的使用</p><p>可知，iOS可用的字体共有75种，加上默认系统字体San Francisco，有76种，基本能满足app开发的需求，这些系统提供的字体的使用只需要指定其font name即可。</p><p>然而，一些设计师在设计UI时常常使用一些第三方字体，这就需要区别处理。</p><h1 id="第三方字体"><a href="#第三方字体" class="headerlink" title="第三方字体"></a>第三方字体</h1><ol><li>必须考虑的问题</li></ol><p>遇到需要使用第三字体的情况时，我们需要考虑两方面问题：</p><ul><li><p>导入字体库会增大app占用空间（英文字体一般为几十到几百K，中文字体包大小可能达到十几兆）；</p></li><li><p>第三方字体商用可能涉及商用版权问题（需购买商用版权）。</p></li></ul><ol start="2"><li>如何在项目中使用</li></ol><ul><li><p>先确认商用版权问题</p></li><li><p>再下载字体包</p></li><li><p>选择对应的TARGET</p></li><li><p>选择Build Phases</p></li><li><p>选择Compile Sources( xxx items ),点击加号添加字体库文件</p></li><li><p>在info.plist中添加key:”Founts provided by application”，在Value中输入对应第三方字体名称</p></li><li><p>在需要用到该第三方字体处用<code>[UIFont fontWithName:fontName size:fontSize];</code>引用对应字体</p></li></ul><h1 id="动态下载苹果官方提供字体"><a href="#动态下载苹果官方提供字体" class="headerlink" title="动态下载苹果官方提供字体"></a>动态下载苹果官方提供字体</h1><p>从iOS6开始，除了iOS系统提供的字体外，应用程序可以根据需要安装附加字体列表，可供开发者动态下载使用，这些字体只适用于实现下载支持的应用程序，字体以这种方式下载的应用程序没有永久安装，系统可能决定在某些使用场景下删除它们。</p><p>我们可以在Mac的Font Book应用中来查看这些附加字体的名称，下载时需要用到其PostScript名称，如下图所示：</p><p><img src="http://upload-images.jianshu.io/upload_images/2251123-4414f1c244b0e2bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="获取字体PostScript名称"></p><p>苹果官方相关说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Demonstrates how to download fonts on demand on iOS 6 and later.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">On iOS 6, we have added the capability for applications to download fonts on demand. Besides the </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fonts installed with iOS 6, applications can install a list of additional fonts as necessary. This </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list of additional fonts can be found in the following article:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iOS 6: Font list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://support.apple.com/kb/HT5484</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">These fonts will only be accessible to applications that implement the download support. Fonts </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">downloaded from applications in this manner are not installed permanently. The system may decide to </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">remove them under certain usage scenarios.</span><br></pre></td></tr></table></figure><p><a href="https://developer.apple.com/library/content/samplecode/DownloadFont/Introduction/Intro.html#//apple_ref/doc/uid/DTS40013404-Intro-DontLinkElementID_2" target="_blank" rel="noopener">官方Demo下载地址</a></p><p>根据官方代码，我们可以很容易地动态下载并在app中使用这些附加字体了。</p><p>如果不愿意看官方文档和Demo，现将主要代码总结如下：</p><h2 id="异步下载附加字体："><a href="#异步下载附加字体：" class="headerlink" title="异步下载附加字体："></a>异步下载附加字体：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)asynchronouslySetFontName:(NSString *)fontName</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> UIFont* aFont = [UIFont fontWithName:fontName size:12.];</span><br><span class="line"></span><br><span class="line">     // 判断该字体是否已经下载</span><br><span class="line"></span><br><span class="line">  if (aFont &amp;&amp; ([aFont.fontName compare:fontName] == NSOrderedSame || [aFont.familyName compare:fontName] == NSOrderedSame)) &#123;</span><br><span class="line"></span><br><span class="line">          // 直接使用</span><br><span class="line"></span><br><span class="line">   NSUInteger sampleIndex = [_fontNames indexOfObject:fontName];</span><br><span class="line"></span><br><span class="line">    _fTextView.text = [_fontSamples objectAtIndex:sampleIndex];</span><br><span class="line"></span><br><span class="line"> _fTextView.font = [UIFont fontWithName:fontName size:24.];</span><br><span class="line"></span><br><span class="line">  return;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">      // 构造字体PostScript名称的字典。</span><br><span class="line"></span><br><span class="line">   NSMutableDictionary *attrs = [NSMutableDictionary dictionaryWithObjectsAndKeys:fontName, kCTFontNameAttribute, nil];</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">       // 从属性字典创建新的字体描述符引用。</span><br><span class="line"></span><br><span class="line">    CTFontDescriptorRef desc = CTFontDescriptorCreateWithAttributes((__bridge CFDictionaryRef)attrs);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    NSMutableArray *descs = [NSMutableArray arrayWithCapacity:0];</span><br><span class="line"></span><br><span class="line">    [descs addObject:(__bridge id)desc];</span><br><span class="line"></span><br><span class="line">    CFRelease(desc);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> __block BOOL errorDuringDownload = NO;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  // 开始处理字体描述符……</span><br><span class="line"></span><br><span class="line">     CTFontDescriptorMatchFontDescriptorsWithProgressHandler( (__bridge CFArrayRef)descs, NULL,  ^(CTFontDescriptorMatchingState state, CFDictionaryRef progressParameter) &#123;</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line"></span><br><span class="line">  //NSLog( @&quot;state %d - %@&quot;, state, progressParameter);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  double progressValue = [[(__bridge NSDictionary *)progressParameter objectForKey:(id)kCTFontDescriptorMatchingPercentage] doubleValue];</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   if (state == kCTFontDescriptorMatchingDidBegin) &#123;</span><br><span class="line"></span><br><span class="line">    dispatch_async( dispatch_get_main_queue(), ^ &#123;</span><br><span class="line"></span><br><span class="line">                // Show an activity indicator</span><br><span class="line"></span><br><span class="line"> [_fActivityIndicatorView startAnimating];</span><br><span class="line"></span><br><span class="line">  _fActivityIndicatorView.hidden = NO;</span><br><span class="line"></span><br><span class="line">                  </span><br><span class="line"></span><br><span class="line">                  // Show something in the text view to indicate that we are downloading</span><br><span class="line"></span><br><span class="line">                  _fTextView.text= [NSString stringWithFormat:@&quot;Downloading %@&quot;, fontName];</span><br><span class="line"></span><br><span class="line">   _fTextView.font = [UIFont systemFontOfSize:14.];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;Begin Matching&quot;);</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> &#125; else if (state == kCTFontDescriptorMatchingDidFinish) &#123;</span><br><span class="line"></span><br><span class="line">  dispatch_async( dispatch_get_main_queue(), ^ &#123;</span><br><span class="line"></span><br><span class="line">                  // Remove the activity indicator</span><br><span class="line"></span><br><span class="line">   [_fActivityIndicatorView stopAnimating];</span><br><span class="line"></span><br><span class="line">    _fActivityIndicatorView.hidden = YES;</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                // 显示新下载字体的示例文本</span><br><span class="line"></span><br><span class="line"> NSUInteger sampleIndex = [_fontNames indexOfObject:fontName];</span><br><span class="line"></span><br><span class="line">  _fTextView.text = [_fontSamples objectAtIndex:sampleIndex];</span><br><span class="line"></span><br><span class="line">   _fTextView.font = [UIFont fontWithName:fontName size:24.];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">                   // Log the font URL in the console</span><br><span class="line"></span><br><span class="line">    CTFontRef fontRef = CTFontCreateWithName((__bridge CFStringRef)fontName, 0., NULL);</span><br><span class="line"></span><br><span class="line">                CFStringRef fontURL = CTFontCopyAttribute(fontRef, kCTFontURLAttribute);</span><br><span class="line"></span><br><span class="line"> NSLog(@&quot;%@&quot;, (__bridge NSURL*)(fontURL));</span><br><span class="line"></span><br><span class="line">                 CFRelease(fontURL);</span><br><span class="line"></span><br><span class="line">  CFRelease(fontRef);</span><br><span class="line"></span><br><span class="line">                  </span><br><span class="line"></span><br><span class="line">   if (!errorDuringDownload) &#123;</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;%@ downloaded&quot;, fontName);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">   &#125; else if (state == kCTFontDescriptorMatchingWillBeginDownloading) &#123;</span><br><span class="line"></span><br><span class="line">    dispatch_async( dispatch_get_main_queue(), ^ &#123;</span><br><span class="line"></span><br><span class="line">                // 显示进度条</span><br><span class="line"></span><br><span class="line"> _fProgressView.progress = 0.0;</span><br><span class="line"></span><br><span class="line">  _fProgressView.hidden = NO;</span><br><span class="line"></span><br><span class="line">   NSLog(@&quot;Begin Downloading&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"> &#125; else if (state == kCTFontDescriptorMatchingDidFinishDownloading) &#123;</span><br><span class="line"></span><br><span class="line">  dispatch_async( dispatch_get_main_queue(), ^ &#123;</span><br><span class="line"></span><br><span class="line">                  // Remove the progress bar</span><br><span class="line"></span><br><span class="line">   _fProgressView.hidden = YES;</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;Finish downloading&quot;);</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line">   &#125; else if (state == kCTFontDescriptorMatchingDownloading) &#123;</span><br><span class="line"></span><br><span class="line">    dispatch_async( dispatch_get_main_queue(), ^ &#123;</span><br><span class="line"></span><br><span class="line">                // 用进度条显示下载进度</span><br><span class="line"></span><br><span class="line"> [_fProgressView setProgress:progressValue / 100.0 animated:YES];</span><br><span class="line"></span><br><span class="line">  NSLog(@&quot;Downloading %.0f%% complete&quot;, progressValue);</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"> &#125; else if (state == kCTFontDescriptorMatchingDidFailWithError) &#123;</span><br><span class="line"></span><br><span class="line">             // An error has occurred.</span><br><span class="line"></span><br><span class="line">             // 获取错误信息</span><br><span class="line"></span><br><span class="line">             NSError *error = [(__bridge NSDictionary *)progressParameter objectForKey:(id)kCTFontDescriptorMatchingError];</span><br><span class="line"></span><br><span class="line">             if (error != nil) &#123;</span><br><span class="line"></span><br><span class="line">                 _errorMessage = [error description];</span><br><span class="line"></span><br><span class="line">             &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                 _errorMessage = @&quot;ERROR MESSAGE IS NOT AVAILABLE!&quot;;</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             // Set our flag</span><br><span class="line"></span><br><span class="line">             errorDuringDownload = YES;</span><br><span class="line"></span><br><span class="line">             </span><br><span class="line"></span><br><span class="line">             dispatch_async( dispatch_get_main_queue(), ^ &#123;</span><br><span class="line"></span><br><span class="line">                 _fProgressView.hidden = YES;</span><br><span class="line"></span><br><span class="line">  NSLog(@&quot;Download error: %@&quot;, _errorMessage&quot;;   &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">           </span><br><span class="line"></span><br><span class="line">    return (bool)YES;</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用系统提供的附加字体，既可以避免商用版权问题，又可以减小应用的体积，适用于多字体样式有要求的应用。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在iOS开发中，我们可能会遇到一些奇怪的UI设计，其中用到好几种非系统库中存在字体，这时我们需要慎重考虑是否要无条件引入第三方字体包，其版权问题和占用空间问题都是十分严重的，需要进一步沟通并确定不存在上述两方面问题时再进行相关开发，否则作为开发者的我们来说会很被动。最后，提醒大家尽量不要使用太多第三方字体，系统提供的字体是用户熟悉了的，app的字体太多反而可能造成用户体验不好，慎之，慎之！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iOS系统家族字体（family-font）&quot;&gt;&lt;a href=&quot;#iOS系统家族字体（family-font）&quot; class=&quot;headerlink&quot; title=&quot;iOS系统家族字体（family font）&quot;&gt;&lt;/a&gt;iOS系统家族字体（family fon
      
    
    </summary>
    
      <category term="iOS" scheme="https://fusugz.github.io/categories/iOS/"/>
    
    
      <category term="Objective-C" scheme="https://fusugz.github.io/tags/Objective-C/"/>
    
      <category term="font" scheme="https://fusugz.github.io/tags/font/"/>
    
      <category term="System" scheme="https://fusugz.github.io/tags/System/"/>
    
  </entry>
  
  <entry>
    <title>Objective-c_3_features</title>
    <link href="https://fusugz.github.io/2017/08/10/Objective-c-3-features/"/>
    <id>https://fusugz.github.io/2017/08/10/Objective-c-3-features/</id>
    <published>2017-08-10T04:19:58.000Z</published>
    <updated>2017-08-11T09:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道，面向对象程序设计中的类有三大特性：继承，封装，多态，这三大特性是学习类的时候，必须理解的问题，既是基础，更该给予重视。</p><h1 id="一、封装（Encapsulation）"><a href="#一、封装（Encapsulation）" class="headerlink" title="一、封装（Encapsulation）"></a>一、封装（Encapsulation）</h1><p>封装就是对类中的一些字段、方法进行保护，不被外界访问到，有一种权限的控制能力，Java中有四种访问权限修饰符：public、default、protected、private，它们的访问权限依次递减，这样我们在定义类的时候，哪些字段和方法不想暴露出去，哪些字段和方法可以暴露，可以通过不同修饰符来区分，这就是封装。</p><p>举例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface Car : NSObject &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 这个属性就是对外进行保密的相当于private，所以我们需要在外部访问的话，必须定义get/set方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 默认的是private的，但是我们可以使用@public设置为public属性的,那么在外部可以直接访问：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person-&gt;capcity = 2.8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 当然我们一般不这么使用，因为这会破坏封装性，这种用法相当于C中的结构体中权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 一共四种：@public,@protected,@private,@package,权限依次递减，这个和Java中是相同的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@public</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">float _capcity; //油量属性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)run;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这里我们可以看到，OC中也有四种权限修饰符：@public、@protected、@private、@package</p><p>其中默认的修饰符是@private。</p><p>但是这里要注意的是，OC中的方法是没有修饰符的概念的，这与其它语言有所区别，一般都是公开访问的，即public的。在OC中，若需要做到让一个方法不能被外界访问，只需要在.m文件中实现这个方法，不要在图文件中进行定义，简言之，就是该方法有实现而没有定义，这样外界在倒入头文件的时候，是没有这个方法的，这个方法只可以在自己的.m文件中使用。</p><h1 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h1><p>继承是类中的一个重要特性，其作用在于避免写重复的代码，可重用性很高，继承的目的是为了减少代码的冗余，还是DRY原则（don`t repeat yourself)。</p><p>在Car.h中，在Car类中定义了两个属性，以及一些方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface Car : NSObject&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSString *_brand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSString *_color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)setBrand:(NSString *)brand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)setColor:(NSString *)color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)brake;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)quicken;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>在Car.m方法中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;Car.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation Car</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)setBrand:(NSString *)brand&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_brand = brand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)setColor:(NSString *)color&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_color = color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)brake&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSLog(@&quot;刹车&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)quicken&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSLog(@&quot;加速&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h2 id="在其子类Taxi中，我们可以对Car的方法进行继承。"><a href="#在其子类Taxi中，我们可以对Car的方法进行继承。" class="headerlink" title="在其子类Taxi中，我们可以对Car的方法进行继承。"></a>在其子类Taxi中，我们可以对Car的方法进行继承。</h2><p>Taxi.h文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;Car.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface Taxi : Car&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSString *_company;//所属公司</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//打印发票</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)printTick;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>Taxi类继承了父类Car,这里需要导入父类的头文件，然后在Taxi类中多了一个属性和方法，与父类一致的方法则继承或改写。</p><p>Taxi.m文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;Taxi.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation Taxi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)printTick&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[super brake];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[self brake];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%@出租车打印了发票，公司为:%@,颜色为:%@&quot;,_brand,_company,_color);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>对方法的实现，这里我们看到实现文件中是不需要导入父类Car的头文件的，因为可以认为，Taxi.h头文件中已经包含了Car的头文件了。而且，这里可以使用super关键字来调用父类的方法，同时这里我们也是可以用self关键字来调用，这里看到其实这两种方式调用的效果是一样的，当我们在子类重新实现brake方法的时候(Java中的重写概念)，那么这时候super关键字调用的还是父类的方法，而self调用的就是重写之后的brake方法了。同样，我们也是可以使用父类中的属性。</p><h2 id="再看一下另外一个子类Truck"><a href="#再看一下另外一个子类Truck" class="headerlink" title="再看一下另外一个子类Truck:"></a>再看一下另外一个子类Truck:</h2><p>在Truck.h中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;Car.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//卡车类继承Car</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface Truck : Car&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">float _maxWeight;//最大载货量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//覆盖父类的方法brake</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//优先调用子类的方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)brake;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)unload;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这里就自己定义了一个brake方法，这时候就会覆盖父类中的brake方法了。</p><p>在Truck.m中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;Truck.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation Truck</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)brake&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[super brake];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSLog(@&quot;Truck类中的brake方法&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)unload&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[super brake];//调用父类的方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[self brake];//也是可以的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%@的卡车卸货了，载货量:%.2f,汽车的颜色:%@&quot;,_brand,_maxWeight,_color);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这里就可以看到，我们会在brake方法中调用一下父类的brake方法，然后在实现我们自己的逻辑代码。</p><h1 id="三、多态"><a href="#三、多态" class="headerlink" title="三、多态"></a>三、多态</h1><p>多态对于面向对象来说，个人感觉真的很重要，其对于编写代码的优雅方式也起到了很重要的作用。在很多设计模式中大部分都是用到了多态的特性，Java中的多态特性用起来很是方便的，但是C++中就很难用了，其实多态说白了就是：定义类型和实际类型，一般是基于接口的形式实现的。</p><p>以打印机为例：</p><p>写一个抽象的打印机类Printer，</p><p>Printer.h:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface Printer : NSObject</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void) print;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>Printer.m:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;Printer.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation Printer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)print&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSLog(@&quot;打印机打印纸张&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>实现也是很简单的,下面来看一下具体的子类ColorPrinter:</p><p>ColorPrinter.h:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;Printer.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//修改父类的打印行为</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface ColorPrinter : Printer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)print;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ColorPrinter.m</span><br></pre></td></tr></table></figure><p>ColorPrinter.m:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;ColorPrinter.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation ColorPrinter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)print&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSLog(@&quot;彩色打印机&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>再看一下另一个子类：</p><p>BlackPrinter.m:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;BlackPrinter.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation BlackPrinter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)print&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSLog(@&quot;黑白打印机&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这里我们在定义一个Person类，用来操作具体的打印机。</p><p>Person.m:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void) printWithColor:(ColorPrinter *)colorPrint&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[colorPrint print];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void) printWithBlack:(BlackPrinter *)blackPrint&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[blackPrint print];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void) doPrint:(Printer *)printer&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[printer print];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>再来看一下测试代码：</p><p>Person.h:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void) printWithColor:(ColorPrinter *)colorPrint&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[colorPrint print];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void) printWithBlack:(BlackPrinter *)blackPrint&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[blackPrint print];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void) doPrint:(Printer *)printer&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[printer print];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>Person.m:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;BlackPrinter.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &quot;ColorPrinter.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, const charchar * argv[]) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@autoreleasepool &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person *person =[[Person alloc] init];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ColorPrinter *colorPrint = [[ColorPrinter alloc] init];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BlackPrinter *blackPrint = [[BlackPrinter alloc] init];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//多态的定义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Printer *p1 = [[ColorPrinter alloc] init];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Printer *p2 = [[BlackPrinter alloc] init];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[person doPrint:p1];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[person doPrint:p2];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//通过控制台输入的命令来控制使用哪个打印机</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int cmd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">do&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;,&amp;cmd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(cmd == 1)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[person doPrint:colorPrint];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;else if(cmd == 2)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[person doPrint:blackPrint];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;while (1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就来详细讨论一下多态的好处，以上例子中一个彩色打印机和黑白打印机，Person类中有一个操作打印的方法，当然这个方法是需要打印机对象的，如果不用多态机制实现的话（Person.h中注释的代码部分），就是给两种打印机单独定义个操作的方法，然后在Person.m（代码注释的部分）中用具体的打印机对象进行操作，在main.m文件中，我们看到，当person需要使用哪个打印机的时候，就去调用指定的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[person printWithBlack:blackPrint];//调用黑白打印机</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[person printWithColor:colorPrint];//调用彩色打印机</span><br></pre></td></tr></table></figure><p>假如现在又需要另一种打印机 ，那么我们还需要在Person.h中定义一种操作这种打印机的方法，那么后续如果添加新的打印机呢？还要继续添加方法吗？那么Person.h文件就会变得臃肿。所以此时多态就体现了优势，使用父类类型，在Person.h中定义一个方法<code>- (void) doPrint:(Printer *)printer;</code>就可以了。这里可以看出，这个方法的参数类型就是父类类型，实际类型为子类类型,其方法体为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void) doPrint:(Printer *)printer&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[printer print];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用print方法，就是传递进来的实际类型的print方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Printer *p1 = [[ColorPrinter alloc] init];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Printer *p2 = [[BlackPrinter alloc] init];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[person doPrint:p1];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[person doPrint:p2];</span><br></pre></td></tr></table></figure><p>这里的p1，p2表面上的类型是printer，但实际类型是子类类型，所以调用他们自己对应的print方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们都知道，面向对象程序设计中的类有三大特性：继承，封装，多态，这三大特性是学习类的时候，必须理解的问题，既是基础，更该给予重视。&lt;/p&gt;
&lt;h1 id=&quot;一、封装（Encapsulation）&quot;&gt;&lt;a href=&quot;#一、封装（Encapsulation）&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS数据持久化之FMDB的简单封装</title>
    <link href="https://fusugz.github.io/2017/07/03/fmdb-encapsulate/"/>
    <id>https://fusugz.github.io/2017/07/03/fmdb-encapsulate/</id>
    <published>2017-07-03T03:29:11.000Z</published>
    <updated>2017-07-03T03:43:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>FMDB是iOS平台处理数据持久化的一个强大工具，可以帮助开发者高效地在客户端处理数据，但对于我等初级开发者来说其使用还是不够简单。因此，有必要对它进行封装，从而使其更易于使用，封装的方式因人而异，需要我们根据自己的代码习惯进行优化。我的封装也仅限于提供一种简单的思路，以便后来者参考。</p><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>我的项目名为<strong>fmdbEncap</strong>,托管于<code>Github</code>。在我的代码中， 使用<code>MZDatabaseManager</code>创建<code>SQLite</code>数据库；在  <code>MZSqliteDao</code>中创建了基于<code>FMDB</code>的一系列方法用于数据库创建、建表，以及数据库的增、删、改、查。</p><p><strong>文末会附上Github项目地址</strong></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>关于如何在你的项目中使用该封装，你只需在引入FMDB的前提下添加本项目中的<code>FMDBEncapsulation</code>文件夹和相关模型数据即可。</p><h2 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h2><p>为了使它简单实用，项目中包含<code>fmdb_task</code>和<code>fmdb_category</code>两个表用于举例说明，表中的参数也与代码中实例一一对应。SQLite数据库建立在<code>Documents</code>路径下，对数据库的一切操作基于模拟数据。我会尽量涵盖FMDB基本使用的相关细节，并将持续更新代码。</p><h3 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h3><p>SQL语句以宏定义的形式在配置文件中写入。</p><ul><li>Table Name</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#define     TABLE_TASK                   @&quot;FMDB_TASK&quot;</span><br><span class="line"></span><br><span class="line">#define     TABLE_CATEGORY               @&quot;FMDB_CATEGORY&quot;</span><br></pre></td></tr></table></figure><ul><li>Create tables</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#define     SQL_CREATE_TASK              @&quot;CREATE TABLE IF NOT EXISTS FMDB_TASK(\</span><br><span class="line"></span><br><span class="line">                                           TASK_ID integer PRIMARY KEY AUTOINCREMENT NOT NULL,\</span><br><span class="line"></span><br><span class="line">                                           ROOM_ID int(11) NOT NULL DEFAULT 0,\</span><br><span class="line"></span><br><span class="line">                                           TASK_INFO int(11),\</span><br><span class="line"></span><br><span class="line">                                           TASK_NUMBER int(4) NOT NULL,\</span><br><span class="line"></span><br><span class="line">                                           TASK_STATUS int(4) NOT NULL,\</span><br><span class="line"></span><br><span class="line">                                           TASK_COORDINATE varchar(20),\</span><br><span class="line"></span><br><span class="line">                                           TASK_BEDSIDE varchar(20)\</span><br><span class="line"></span><br><span class="line">                                           );&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define     SQL_CREATE_CATEGORY          @&quot;CREATE TABLE IF NOT EXISTS FMDB_CATEGORY(\</span><br><span class="line"></span><br><span class="line">                                           CATEGORY_ID integer PRIMARY KEY AUTOINCREMENT NOT NULL,\</span><br><span class="line"></span><br><span class="line">                                           PARENT_ID int(11) NOT NULL,\</span><br><span class="line"></span><br><span class="line">                                           LEVEL int(11),\</span><br><span class="line"></span><br><span class="line">                                           CATEGORY_NAME nvarchar(45) NOT NULL,\</span><br><span class="line"></span><br><span class="line">                                           CATEGORY_IMG varchar(100),\</span><br><span class="line"></span><br><span class="line">                                           CATEGORY_RANK int(11) NOT NULL,\</span><br><span class="line"></span><br><span class="line">                                           CATEGORY_TYPE int(4) NOT NULL,\</span><br><span class="line"></span><br><span class="line">                                           CATEGORY_STATUS int(11) NOT NULL,\</span><br><span class="line"></span><br><span class="line">                                           CATEGORY_REMARK nvarchar(100)\</span><br><span class="line"></span><br><span class="line">                                           );&quot;</span><br></pre></td></tr></table></figure><ul><li>Insert</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#define     SQL_INSERT_TASK              @&quot;INSERT INTO FMDB_TASK\</span><br><span class="line"></span><br><span class="line">                                           ( ROOM_ID, TASK_INFO, TASK_NUMBER,\</span><br><span class="line"></span><br><span class="line">                                           TASK_STATUS, TASK_COORDINATE, TASK_BEDSIDE)\</span><br><span class="line"></span><br><span class="line">                                           VALUES ( &apos;%d&apos;, &apos;%d&apos;, &apos;%d&apos;, &apos;%d&apos;, &apos;%@&apos;, &apos;%@&apos;);&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define     SQL_INSERT_CATEGORY          @&quot;INSERT INTO FMDB_CATEGORY\</span><br><span class="line"></span><br><span class="line">                                           ( PARENT_ID, LEVEL, CATEGORY_NAME, CATEGORY_IMG,\</span><br><span class="line"></span><br><span class="line">                                           CATEGORY_RANK, CATEGORY_TYPE, CATEGORY_STATUS, CATEGORY_REMARK)\</span><br><span class="line"></span><br><span class="line">                                           VALUES ( &apos;%d&apos;, &apos;%d&apos;, &apos;%@&apos;, &apos;%d&apos;, &apos;%d&apos;, &apos;%d&apos;, &apos;%d&apos;, &apos;%@&apos;);&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define     SQL_INSERT_TASK_PARAMTER     @&quot;INSERT INTO FMDB_TASK\</span><br><span class="line"></span><br><span class="line">                                           ( ROOM_ID, TASK_INFO, TASK_NUMBER,\</span><br><span class="line"></span><br><span class="line">                                           TASK_STATUS, TASK_COORDINATE, TASK_BEDSIDE)\</span><br><span class="line"></span><br><span class="line">                                           VALUES (\</span><br><span class="line"></span><br><span class="line">                                           :roomID, :taskInfo, :taskNumber, :taskStatus, :taskCoordinate, :taskBeside);&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define     SQL_INSERT_CATEGORY_PARAMTER @&quot;INSERT INTO FMDB_CATEGORY\</span><br><span class="line"></span><br><span class="line">                                           ( PARENT_ID, LEVEL, CATEGORY_NAME, CATEGORY_IMG,\</span><br><span class="line"></span><br><span class="line">                                           CATEGORY_RANK, CATEGORY_TYPE, CATEGORY_STATUS, CATEGORY_REMARK)\</span><br><span class="line"></span><br><span class="line">                                           VALUES (\</span><br><span class="line"></span><br><span class="line">                                           :prantID, :level, :categoryName, :categoryImage, :categoryRank, :categoryType, :categoryStatus, :categoryRemark);&quot;</span><br></pre></td></tr></table></figure><ul><li>Update</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#define     SQL_UPDATE_TASK              @&quot;UPDATE FMDB_TASK\</span><br><span class="line"></span><br><span class="line">                                           SET ROOM_ID = &apos;%d&apos;, TASK_INFO = &apos;%d&apos;, TASK_NUMBER = &apos;%d&apos;,\</span><br><span class="line"></span><br><span class="line">                                           TASK_STATUS = &apos;%d&apos;, TASK_COORDINATE = &apos;%@&apos;, TASK_BEDSIDE = &apos;%@&apos;\</span><br><span class="line"></span><br><span class="line">                                           WHERE TASK_ID = &apos;%d&apos;;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define     SQL_UPDATE_CATEGORY          @&quot;UPDATE FMDB_CATEGORY\</span><br><span class="line"></span><br><span class="line">                                           SET PARENT_ID = &apos;%d&apos;, LEVEL = &apos;%d&apos;, CATEGORY_NAME = &apos;%@&apos;,\</span><br><span class="line"></span><br><span class="line">                                           CATEGORY_IMG = &apos;%d&apos;,CATEGORY_RANK = &apos;%d&apos;, CATEGORY_TYPE = &apos;%d&apos;,\</span><br><span class="line"></span><br><span class="line">                                           CATEGORY_STATUS = &apos;%d&apos;,CATEGORY_REMARK = &apos;%@&apos;\                                           WHERE CATEGORY_ID = &apos;%d&apos;;&quot;</span><br></pre></td></tr></table></figure><ul><li>Delete</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#define     SQL_DELETE                   @&quot;DELETE FROM %@ WHERE &apos;%@&apos;=&apos;%d&apos;;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define     SQL_DELETE_ALL               @&quot;DELETE FROM %@&quot;</span><br></pre></td></tr></table></figure><ul><li>Select</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#define     SQL_SELECT_ALL               @&quot;SELECT * FROM %@;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define     SQL_SELECT_PARAMTER          @&quot;SELECT * FROM %@ WHERE %@ = &apos;%d&apos;;&quot;</span><br></pre></td></tr></table></figure><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><hr><p>1.Create database</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[[MZDatabaseManager sharedInstance] createDatabaseWithName:@&quot;test&quot;];</span><br></pre></td></tr></table></figure><p>2.Create table</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">self.sqliteDao = [[MZSqliteDao alloc] init];</span><br><span class="line"></span><br><span class="line">// create table</span><br><span class="line"></span><br><span class="line">[self.sqliteDao createTable:TABLE_TASK withSQL:SQL_CREATE_TASK];</span><br><span class="line"></span><br><span class="line">[self.sqliteDao createTable:TABLE_CATEGORY withSQL:SQL_CREATE_CATEGORY];</span><br></pre></td></tr></table></figure><p>3.Insert </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NSArray *arrayOfTasks = [MZTask taskMetedata];</span><br><span class="line"></span><br><span class="line">    NSArray *arrayOfCategories = [MZCategory categoryMetedata];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">      // task: SQL 语句拼接</span><br><span class="line"></span><br><span class="line">    for (MZTask *task in arrayOfTasks) &#123;</span><br><span class="line"></span><br><span class="line">        NSString *SQL_InsertTaskData = [NSString stringWithFormat:SQL_INSERT_TASK,[task.roomID intValue],[task.taskInfo  intValue],[task.taskNumber  intValue],[task.taskStatus  intValue],task.taskCoordinate,task.taskBeside];</span><br><span class="line"></span><br><span class="line">        BOOL success = [self.sqliteDao excuteSQL:SQL_InsertTaskData];</span><br><span class="line"></span><br><span class="line">        if (success) &#123;</span><br><span class="line"></span><br><span class="line">            NSLog(@&quot;insert success!&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      // category: 带参</span><br><span class="line"></span><br><span class="line">    for (NSInteger i = 0; i &lt; arrayOfCategories.count; i ++) &#123;</span><br><span class="line"></span><br><span class="line">        MZCategory *category = arrayOfCategories[i];</span><br><span class="line"></span><br><span class="line">        NSDictionary *paramDict = @&#123;@&quot;prantID&quot;:category.parentID,</span><br><span class="line"></span><br><span class="line">                                    @&quot;level&quot;:category.level,</span><br><span class="line"></span><br><span class="line">                                    @&quot;categoryName&quot;:category.categoryName,</span><br><span class="line"></span><br><span class="line">                                    @&quot;categoryImage&quot;:category.categoryImg,</span><br><span class="line"></span><br><span class="line">                                    @&quot;categoryRank&quot;:category.categoryRank,</span><br><span class="line"></span><br><span class="line">                                    @&quot;categoryType&quot;:category.categoryType,</span><br><span class="line"></span><br><span class="line">                                    @&quot;categoryStatus&quot;:category.categoryStatus,</span><br><span class="line"></span><br><span class="line">                                    @&quot;categoryRemark&quot;:category.categoryRemark</span><br><span class="line"></span><br><span class="line">                                    &#125;;</span><br><span class="line"></span><br><span class="line">        BOOL success = [self.sqliteDao excuteSQL:SQL_INSERT_CATEGORY_PARAMTER withDicParameter:paramDict];</span><br><span class="line"></span><br><span class="line">        if (success) &#123;</span><br><span class="line"></span><br><span class="line">            NSLog(@&quot;%@ insert success!&quot;,paramDict);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4.Update</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NSString *SQL_UpdateTaskData = [NSString stringWithFormat:SQL_UPDATE_TASK, 10, 10, 10, 10,@&quot;la&quot;,@&quot;la&quot;, 10];</span><br><span class="line"></span><br><span class="line">[self.sqliteDao excuteSQL:SQL_UpdateTaskData];</span><br></pre></td></tr></table></figure><p>5.Delete</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//NSString *SQL_DeleteAllTaskData = [NSString stringWithFormat:SQL_DELETE_ALL,TABLE_TASK];</span><br><span class="line"></span><br><span class="line">// delete one record</span><br><span class="line"></span><br><span class="line">    NSString *SQL_DeleteTaskData = [NSString stringWithFormat:SQL_DELETE,TABLE_TASK,@&quot;TASK_ID&quot;,248];</span><br><span class="line"></span><br><span class="line">    BOOL deleteSuccess = [self.sqliteDao excuteSQL:SQL_DeleteTaskData];</span><br><span class="line"></span><br><span class="line">    if (deleteSuccess) &#123;</span><br><span class="line"></span><br><span class="line">        NSLog(@&quot;delete success!&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>6.Select</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NSString *SQL_SelectCategoryData = [NSString stringWithFormat:SQL_SELECT_ALL,TABLE_TASK];</span><br><span class="line"></span><br><span class="line">    NSMutableArray *selectedTasks = [NSMutableArray array];</span><br><span class="line"></span><br><span class="line">    // select *</span><br><span class="line"></span><br><span class="line">    [self.sqliteDao excuteQuerySQL:SQL_SelectCategoryData resultBlock:^(FMResultSet *rsSet) &#123;</span><br><span class="line"></span><br><span class="line">        while ([rsSet next]) &#123;</span><br><span class="line"></span><br><span class="line">            NSMutableDictionary *dict = [[NSMutableDictionary alloc] init];</span><br><span class="line"></span><br><span class="line">            [dict setValue:[rsSet objectForColumnName:@&quot;TASK_ID&quot;] forKey:@&quot;TASK_ID&quot;];</span><br><span class="line"></span><br><span class="line">            [dict setValue:[rsSet objectForColumnName:@&quot;ROOM_ID&quot;] forKey:@&quot;ROOM_ID&quot;];</span><br><span class="line"></span><br><span class="line">            [dict setValue:[rsSet objectForColumnName:@&quot;TASK_INFO&quot;] forKey:@&quot;TASK_INFO&quot;];</span><br><span class="line"></span><br><span class="line">            [dict setValue:[rsSet objectForColumnName:@&quot;TASK_NUMBER&quot;] forKey:@&quot;TASK_NUMBER&quot;];</span><br><span class="line"></span><br><span class="line">            [dict setValue:[rsSet objectForColumnName:@&quot;TASK_STATUS&quot;] forKey:@&quot;TASK_STATUS&quot;];</span><br><span class="line"></span><br><span class="line">            [dict setValue:[rsSet objectForColumnName:@&quot;TASK_COORDINATE&quot;] forKey:@&quot;TASK_COORDINATE&quot;];</span><br><span class="line"></span><br><span class="line">            [dict setValue:[rsSet objectForColumnName:@&quot;TASK_BEDSIDE&quot;] forKey:@&quot;TASK_BEDSIDE&quot;];</span><br><span class="line"></span><br><span class="line">            [selectedTasks addObject:dict];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;selected all tasks:%@&quot;,selectedTasks);</span><br><span class="line"></span><br><span class="line">    // select by ID</span><br><span class="line"></span><br><span class="line">    NSString *SQL_SelectByID = [NSString stringWithFormat:SQL_SELECT_PARAMTER,TABLE_CATEGORY,@&quot;CATEGORY_ID&quot;,6];</span><br><span class="line"></span><br><span class="line">    [self.sqliteDao excuteQuerySQL:SQL_SelectByID resultBlock:^(FMResultSet *rsSet) &#123;</span><br><span class="line"></span><br><span class="line">        while ([rsSet next]) &#123;</span><br><span class="line"></span><br><span class="line">            // save as model data</span><br><span class="line"></span><br><span class="line">            MZCategory *selectedCategory    = [MZCategory new];</span><br><span class="line"></span><br><span class="line">            selectedCategory.categoryID     = [rsSet objectForColumnName:@&quot;CATEGORY_ID&quot;];</span><br><span class="line"></span><br><span class="line">            selectedCategory.parentID       = [rsSet objectForColumnName:@&quot;PARENT_ID&quot;];</span><br><span class="line"></span><br><span class="line">            selectedCategory.level          = [rsSet objectForColumnName:@&quot;LEVEL&quot;];</span><br><span class="line"></span><br><span class="line">            selectedCategory.categoryName   = [rsSet objectForColumnName:@&quot;CATEGORY_NAME&quot;];</span><br><span class="line"></span><br><span class="line">            selectedCategory.categoryImg    = [rsSet objectForColumnName:@&quot;CATEGORY_IMG&quot;];</span><br><span class="line"></span><br><span class="line">            selectedCategory.categoryRank   = [rsSet objectForColumnName:@&quot;CATEGORY_RANK&quot;];</span><br><span class="line"></span><br><span class="line">            selectedCategory.categoryType   = [rsSet objectForColumnName:@&quot;CATEGORY_TYPE&quot;];</span><br><span class="line"></span><br><span class="line">            selectedCategory.categoryStatus = [rsSet objectForColumnName:@&quot;CATEGORY_STATUS&quot;];</span><br><span class="line"></span><br><span class="line">            selectedCategory.categoryRemark = [rsSet objectForColumnName:@&quot;CATEGORY_REMARK&quot;];</span><br><span class="line"></span><br><span class="line">            NSLog(@&quot;select by categoryID:%d,parentID:%d,level:%d,categoryName:%@,categoryImg:%@,categoryRank:%d,categoryType:%d,categoryStatus:%d,categoryRemark:%@&quot;,[selectedCategory.categoryID intValue],[selectedCategory.parentID intValue],[selectedCategory.level intValue],selectedCategory.categoryName,selectedCategory.categoryImg,[selectedCategory.categoryRank intValue],[selectedCategory.categoryType intValue],[selectedCategory.categoryStatus intValue],selectedCategory.categoryRemark);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure><h2 id="说在后面"><a href="#说在后面" class="headerlink" title="说在后面"></a>说在后面</h2><p>本人技术浅薄，对数据库的理解也不够深入透彻，在此写下微末经验，以期为后来之初学者提供些许便利，若有一人觉得此项目并非通篇胡言，也不枉我码字之劳累，最后奉上<a href="https://github.com/fusugz/fmdbEncap" target="_blank" rel="noopener">Github项目地址</a>，如需参考不妨前往下载。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;缘由&quot;&gt;&lt;a href=&quot;#缘由&quot; class=&quot;headerlink&quot; title=&quot;缘由&quot;&gt;&lt;/a&gt;缘由&lt;/h2&gt;&lt;p&gt;FMDB是iOS平台处理数据持久化的一个强大工具，可以帮助开发者高效地在客户端处理数据，但对于我等初级开发者来说其使用还是不够简单。因此，有
      
    
    </summary>
    
      <category term="Objective-C" scheme="https://fusugz.github.io/categories/Objective-C/"/>
    
    
      <category term="fmdb" scheme="https://fusugz.github.io/tags/fmdb/"/>
    
      <category term="database" scheme="https://fusugz.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>不容错过的WWDC17全程记录</title>
    <link href="https://fusugz.github.io/2017/06/06/note-of-WWDC17/"/>
    <id>https://fusugz.github.io/2017/06/06/note-of-WWDC17/</id>
    <published>2017-06-06T11:09:46.000Z</published>
    <updated>2017-06-06T11:13:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2251123-4348ae5a59d0dcfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="wwdc2017"></p><p>WWDC17如期而至，苹果这一次体现了足够的诚意，也展现了其继续改变世界的决心和情怀，在Keynote环节用两个多小时阐述和演示了苹果生态系统软硬件方面的更新，有升级优化，也有创造革新，可谓亮点多多。</p><p>苹果一直声称要以技术和情怀改变世界，正如本次主题词:</p><blockquote><p>Technology alone is not enough.</p></blockquote><p>Technology must intersect with the liberal arts and the humanities, </p><p>to create new ideas and experiences that push society forward. </p><p>This summer we bring together thousands of brilliant minds representing many diverse perspectives,passions, and talents to help us change the world.</p><p>仅仅靠技术是不够的。</p><p>技术必须与文科和人文相交，创造新的思想和经验，推动社会向前发展。</p><p>今年夏天，我们汇集了成千上万的才华横溢的人才，代表着许多不同的观点，激情和才华，以帮助我们改变世界。</p><p><strong>那么，快来看看苹果将怎样改变世界吧</strong></p><ul><li><p>硬件方面：发布了包括21.5/27寸iMac/iMac Pro、10.5寸超窄边iPad Pro、7代酷睿的MacBook、A10X处理器的iPad Pro，支持Siri和HomeKit的全新硬件HomePad扬声器等。</p></li><li><p>软件方面：tvOS细微改进、watchOS 4、macOS High Sierra、iOS 11等。</p></li></ul><hr><h1 id="tvOS"><a href="#tvOS" class="headerlink" title="tvOS"></a>tvOS</h1><h2 id="Changes-on-tvOC"><a href="#Changes-on-tvOC" class="headerlink" title="Changes on tvOC"></a>Changes on tvOC</h2><blockquote><p>Add Amzon and suppot it’s prime video </p></blockquote><p>tvOS本次没有实质上的更新，仅仅宣布了亚马逊的加入并为其带来了更多优秀的视频。</p><hr><h1 id="watchOS"><a href="#watchOS" class="headerlink" title="watchOS"></a>watchOS</h1><h2 id="Changes-on-watchOS"><a href="#Changes-on-watchOS" class="headerlink" title="Changes on watchOS"></a>Changes on watchOS</h2><blockquote><p>watchOS 4 updates</p></blockquote><p>i. Card View UI      </p><p>ii. Activity new UI</p><p>iii. Great support for workout</p><p>iv. Music app added and support background play</p><p>watch OS在UI上学习了Google Material UI的Card View,使得iWatch在视觉呈现上更加美观，同时在通知栏UI上有了较大改变。在运动、天气、交通等方面更好地支持户外生活，运动数据呈现更加生动直观。新加入的Music app让用户可以直接在手表上享受音乐，并可支持无线蓝牙。</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><blockquote><p>Screen autorotate  </p></blockquote><p>Background navigation</p><p>Background audio recording</p><p>Single-propress runtime</p><p>Full screen</p><p>Overlapping layers</p><p>Water lock API</p><p>Core Bluetooth</p><p>以上是watchOS许多细节上的特性。此外，watchOS新加入了万花筒新表盘和玩具总动员表盘。</p><hr><h1 id="macOS-High-Sierra-amp-New-Macs"><a href="#macOS-High-Sierra-amp-New-Macs" class="headerlink" title="macOS High Sierra &amp; New Macs"></a>macOS High Sierra &amp; New Macs</h1><h2 id="Updates-on-macOS-High-Sierra"><a href="#Updates-on-macOS-High-Sierra" class="headerlink" title="Updates on macOS High Sierra"></a>Updates on macOS High Sierra</h2><h3 id="Safari-more-faster"><a href="#Safari-more-faster" class="headerlink" title="Safari  ( more faster )"></a>Safari  ( more faster )</h3><blockquote><p> World’s most fast desktop browser</p></blockquote><p>Modern JavaScript performance</p><p>Intelligent tracking prevention</p><p>Safari的更新最显著的是速度，比Chrome快了80%，号称目前最快速的桌面浏览器。</p><h3 id="Mail"><a href="#Mail" class="headerlink" title="Mail"></a>Mail</h3><blockquote><p>Full-screen split view</p></blockquote><p>Storage space required for mail up to 35% less</p><p>邮箱可支持全屏左右分屏操作，可以对着收件内容编辑回复，方便直观；同时，邮件的空间占用减少了35%。</p><h3 id="Photo"><a href="#Photo" class="headerlink" title="Photo"></a>Photo</h3><p>更好地根据人工智能进行分类，更精准人脸识别，帮助用户科学管理照片。</p><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>APFS ( Apple File System )</p><blockquote><p><strong>Advanced architecture</strong></p></blockquote><p>Optimized for morden storage</p><p>64-bit data structure</p><p>Easily adapted to future storage</p><blockquote><p><strong>Safe and Secure</strong></p></blockquote><p>Crash protection</p><p>Safe document saves</p><p>Stable snapshots</p><p>Native encryption</p><blockquote><p><strong>Ultra Responsive</strong></p></blockquote><p>Instant file and directory cloning</p><p>Fast directory sizing</p><p>Zero copy snapshots</p><p>Parallelized metedata operations</p><p>Frequently used items in inode</p><p>Sparse file write</p><p>文件系统由HFS升级为APFS，提升了易用性和安全性，复制操作显著变快。</p><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>H.265( High Efficiency Video Coding ) —up to 40% better compression than H.264</p><p>支持更加快速高效的H.265视频编码，压缩速率比H.264快了40%。</p><h3 id="Graphics-All-about-GPU"><a href="#Graphics-All-about-GPU" class="headerlink" title="Graphics ( All about GPU )"></a>Graphics ( All about GPU )</h3><p>i. Metal 2 updated,up to 10x better draw call throughput</p><blockquote><p>Driver optimizeations</p></blockquote><p>Indirect argument buffers</p><p>SIMD group data exchange </p><p>Uniform variables</p><p>Sampler arrays</p><p>Resource heaps</p><p>由Metal到Metal 2，性能提高10倍。</p><p>ii. Used for machine learning</p><blockquote><p>Metal perfance shaders</p></blockquote><p>Recurrent nature network kernels</p><p>Binary convolution</p><p>Dilated convolution</p><p>L-2 norm pooling</p><p>Dilated pooling</p><p>加入人工智能，功能更强大。</p><p>iii. Metal for external graphics</p><blockquote><p>Thunderbolt 3 enclosure</p></blockquote><p>AMD Redern RX 580</p><p>USB-C hub</p><p>外部设备支持升级。</p><p>iv. VR content creation ( Metal for VR )</p><blockquote><p>VR -optimized display pipeline</p></blockquote><p>Viewport arrays</p><p>System trace stereo timelines</p><p>GPU quene priorities</p><p>Frame debugger stereoscopic</p><p>Visualization</p><p>可支持VR内容创造。</p><p><strong>今天起可在开发者网站下载macOS High Sierra Bate版本</strong></p><h2 id="New-iMacs"><a href="#New-iMacs" class="headerlink" title="New iMacs"></a>New iMacs</h2><h3 id="Features-1"><a href="#Features-1" class="headerlink" title="Features"></a>Features</h3><blockquote><p><strong>Best Mac displayers ever</strong></p></blockquote><p>500 nits</p><p>43% brighter</p><p>10-bit dithering</p><p>One billion colrs</p><blockquote><p><strong>Faster processors</strong></p></blockquote><p>7th-gen Intel core</p><p>“Kaby lake”</p><p>Higher base &amp; turbo frequencies</p><p>10-bit HEVC decode</p><p>更快的数据处理器</p><blockquote><p><strong>Higher memory capacity</strong></p></blockquote><p>Up to 32GB on 21.5-inch</p><p>Up to 64GB on 27-inch</p><p>更大存储空间</p><blockquote><p><strong>Super fast storage</strong></p></blockquote><p>Fusion drive on all 27-inch </p><p>Up to 50% faster SSDs</p><p>Up to 2TB</p><p>超快存储速度</p><h3 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h3><p>| iMac | Price | Improvement |</p><p>| —————– |——-|———————————————–|</p><p>|iMac 21.5-inch|$1099|Intl Iris Plus Graphics 640 with 64MB eDRAM &amp; Up to 80% faster graphics|</p><p>|iMac Retina 4k 21.5-inch|$1499|Radern Pro 555 &amp; 560 up to 4GB VRAM &amp; Up to 3xfaster graphics|</p><p>|iMac Retina 5k 27-inch|$1799|Radern Pro 570,575 &amp; 580 up to 8GB VRAM &amp; Up to 5.5x teraflops</p><h3 id="The-most-powerful-Mac-ever-—iMac-Pro"><a href="#The-most-powerful-Mac-ever-—iMac-Pro" class="headerlink" title="The most powerful Mac ever —iMac Pro"></a>The most powerful Mac ever —iMac Pro</h3><blockquote><p>Up to 18-Core Xean Procesor</p></blockquote><p>Up to 22 traflops half precision</p><p>Up to 128GB ECC memory</p><p>…and so on</p><p>工作站级别，性能卓越！</p><h2 id="New-MacBooks"><a href="#New-MacBooks" class="headerlink" title="New MacBooks"></a>New MacBooks</h2><p>|MacBook|Price|</p><p>|————————-|———|</p><p>|MacBook |$1299|</p><p>|MacBook Pro |$1299|</p><p>|MacBook Pro 13-inch|$1799|</p><p>|MacBook Pro 15-inch |$2399|</p><p>MacBook没有更新，手上的还可以用。</p><h1 id="iOS-amp-HomePod"><a href="#iOS-amp-HomePod" class="headerlink" title="iOS &amp; HomePod"></a>iOS &amp; HomePod</h1><p>Tim Cook首先鄙视了一下Android 7安装率</p><blockquote><p>iOS 10: %86 </p></blockquote><p>Android 7: %7</p><p>大家都知道这不能说明什么问题，Android 7安装率低有其特殊原因，Just for fun。iOS 11 comes,我们主要来看iOS 11有哪些新特性。</p><h2 id="Technologies"><a href="#Technologies" class="headerlink" title="Technologies"></a>Technologies</h2><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><blockquote><p>Redesigned app drawer</p></blockquote><p>Messages in iCloud</p><p>Optimized device storage smaller and faster backups iOS &amp; macOS</p><p>50% U.S. retailers accpting Apple Pay by end of year send and received money on iMessage</p><p>iMessage可储存到iCloud并可备份到iOS设备和macOS设备，年底将有50%的零售商在iMessage支持Apple Pay支付。</p><h3 id="Siri"><a href="#Siri" class="headerlink" title="Siri"></a>Siri</h3><p>i. 支持更多语言</p><p>ii. 支持人工智能</p><p>iii. 翻译功能：支持英语与中文、法语、德语、意大利语、西班牙语等互相翻译</p><p>iv. Siri Kit can support more</p><h3 id="Camera-amp-Photos"><a href="#Camera-amp-Photos" class="headerlink" title="Camera &amp; Photos"></a>Camera &amp; Photos</h3><blockquote><p>H.265 supported</p></blockquote><p>Depth API</p><p>Live Photos &amp; Loop Photos &amp; Live Photos倒放</p><p>图片变得更有趣了。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>新增Do not disturb while driving模式，利用人工智能使用户在驾车模式可打开该模式，防止不必要干扰（如推送、短信、垃圾邮件等），接到短信后可自动发短信回复说明正在驾驶，稍后回复。</p><h3 id="Home-Kit"><a href="#Home-Kit" class="headerlink" title="Home Kit"></a>Home Kit</h3><p>Air Play 2 </p><p>开放Air Play 2 Audio API，开发者可开发相关智能家居功能。</p><h3 id="Apple-Music"><a href="#Apple-Music" class="headerlink" title="Apple Music"></a>Apple Music</h3><blockquote><p>Full access to Apple Music service</p></blockquote><p>Cloud Library access</p><p>Users’ for you recommendations</p><p>Featured music &amp;charts</p><p>Search playlist,stations,,and catalog</p><p>更加注重社交和个性化，更智能帮助用户筛选音乐。</p><h3 id="App-Store-—the-best-platform-in-the-worlld"><a href="#App-Store-—the-best-platform-in-the-worlld" class="headerlink" title="App Store —the best platform in the worlld"></a>App Store —the best platform in the worlld</h3><blockquote><p>Trusted and safe place for users great opportunity for all developers</p></blockquote><p>Every single day has new app and new games commend for users</p><p>App Store中app和游戏展示更加丰富详细，每日有推荐，值得信任，安全友好。</p><h3 id="Machine-Learning-Core-ML"><a href="#Machine-Learning-Core-ML" class="headerlink" title="Machine Learning ( Core ML )"></a>Machine Learning ( Core ML )</h3><blockquote><p>Vision API,learning API</p></blockquote><p>Images recognized per minute</p><p>人工智能开放API。</p><h3 id="AR-AR-Kit-—the-largest-AR-platform-in-the-world"><a href="#AR-AR-Kit-—the-largest-AR-platform-in-the-world" class="headerlink" title="AR ( AR Kit )—the largest AR platform in the world"></a>AR ( AR Kit )—the largest AR platform in the world</h3><blockquote><p>Fast,stable motion tracking</p></blockquote><p>Plane estimation with basic boundaries</p><p>Ambient lighting estimation</p><p>Scale extimation</p><p>Support for Unity,Unreal,ScenceKit</p><p>Xcode app templates</p><p>苹果终于祭出AR大招了，会上演示了Demo，非常强大！</p><h3 id="Something-Special-for-China"><a href="#Something-Special-for-China" class="headerlink" title="Something Special for China"></a>Something Special for China</h3><blockquote><p>QR code support </p></blockquote><p>SMS fraud extension</p><p>Traffic cameras</p><p>Shanghainese dictation</p><p>English on 10-key Pinyin keyboard</p><p>Phone number as Apple ID</p><p>苹果又一次在开发者大会上向中国用户示好（毕竟中国用户这么多）。支持了用相机扫二维码、短信诈骗防护、交通摄像机、上海话听写10键拼音键盘和电话号码绑定Apple ID等，诚意满分。</p><h2 id="iOS-11-on-iPad"><a href="#iOS-11-on-iPad" class="headerlink" title="iOS 11 on iPad"></a>iOS 11 on iPad</h2><h3 id="Pro-motion-—120Hz-Display-refresh-rate"><a href="#Pro-motion-—120Hz-Display-refresh-rate" class="headerlink" title="Pro motion —120Hz Display refresh rate"></a>Pro motion —120Hz Display refresh rate</h3><blockquote><p>Six-Core CPU</p></blockquote><p>Twelve-Core GPU</p><p>性能提升。</p><h3 id="Deck-on-iPad"><a href="#Deck-on-iPad" class="headerlink" title="Deck on iPad"></a>Deck on iPad</h3><p>iPad新增Deck，类似于iMac，可呈现与隐藏，方便拖拽与分屏。</p><h3 id="Files-on-iPad"><a href="#Files-on-iPad" class="headerlink" title="Files on iPad"></a>Files on iPad</h3><p>iPad新增文件系统，支持拖来拖去功能，文件操作十分方便，是一个非常强大的文件系统。</p><h2 id="HomePod-349"><a href="#HomePod-349" class="headerlink" title="HomePod ( $349 )"></a>HomePod ( $349 )</h2><p>Reinvent Home Music &amp; Breakthrough Home Speaker</p><h3 id="For-waht"><a href="#For-waht" class="headerlink" title="For waht"></a>For waht</h3><ul><li><p>Rock the house</p></li><li><p>Spatial awareness</p></li><li><p>Musicologist</p></li><li><p>Home assistant</p></li></ul><h3 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h3><blockquote><p>7beam-forming tweeter array</p></blockquote><p>Precision acoustic horns</p><p>Directional control</p><p>Apple designed woofer</p><p>Automatic bass equalizetion</p><p>Dynamic modeling</p><h3 id="Great-Home-Speaker"><a href="#Great-Home-Speaker" class="headerlink" title="Great Home Speaker"></a>Great Home Speaker</h3><p>HomePod可以有一个非常高大上的中文名：轰趴，具有绝美外观，搭载A8处理器。可支持立体环绕声，也可只朝一个方向发声。可在HomePod中使用Siri，可以直接对它说话，如控制电器、介绍新闻等。具备Anonymous ID，黑白两种颜色。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2251123-4348ae5a59d0dcfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
      <category term="iOS" scheme="https://fusugz.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://fusugz.github.io/tags/iOS/"/>
    
      <category term="WWDC" scheme="https://fusugz.github.io/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>写一个Delete程序去忘记</title>
    <link href="https://fusugz.github.io/2017/06/04/write-a-delete-program-to-forget/"/>
    <id>https://fusugz.github.io/2017/06/04/write-a-delete-program-to-forget/</id>
    <published>2017-06-04T15:10:26.000Z</published>
    <updated>2017-06-04T15:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2251123-200142e6247ae54d.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Memory"></p><p>清晨，太阳照常升起了。宿醉之后常常不知身在何处，片刻之后，思绪翻飞，一切昨夜迫切想忘记的又都浮上了心头。回到现实后不得不接受与另一半分开的事实，与其继续怀念，沉浸在悲哀苦闷之中，不如尝试去忘记。</p><p>于是，作为程序员，我决定尝试写一个Delete程序去忘记。</p><p>该程序的核心在于删除某些记忆片段，让未来的生活不再受痛苦回忆的羁绊。</p><blockquote><p>首先，查找相关目标对象</p></blockquote><p>面对庞大的大脑记忆系统，收集数据是一件繁复的事情。要找到人脑记忆的存储单元，遍历其所有神经元，找到记忆的存储入口。该入口的打开可能与外部刺激有关，因此需要模拟传入信息与记忆存储入口进行对接。一旦对接成功，将对接过程中的密码（电信号）保存，并行对所有记忆入口进行对接搜索，根据“前女友”、“前女友名字”、“爱情”、“可爱”、“好妹妹”、“爱人”等关键字进行检索，获取相关目标记忆片段。</p><blockquote><p>逐一对各目标记忆片段进行记忆唤醒，筛选出精准目标对象</p></blockquote><p>此时，需要确定相关目标记忆片段中哪些是需要删除的目标记忆片段。有效方法是声明一个方法用来筛选（类似爬虫），遍历所有相关目标记忆片段，逐一用记忆唤醒方法进行判断，用返回的布尔值进行筛选，True表示需要删除，False表示不需要删除。在筛选方法中，将记忆片段对象输送到人脏处，用刺激方法检查是否引起心率异常，是否引起心痛，以及是否引起头痛、四肢无力等人体机能反应。若有，则返回True；若无，则返回False。接下来，在所有返回为False的记忆中，将所有大脑和心脏能平稳接受并心如止水的记忆完整保存好，重新用储存方法储存在大脑中；将所有令大脑产生愉悦并伴随美好幻想的记忆进行备份处理，并存储在核心存储区，执行定时任务，每隔一段时间进行回忆。将所有判断出需删除记忆片段按类型分开存储在浅记忆区，以便分时分类删除。</p><blockquote><p>对需删除记忆对象根据不同类别进行删除操作</p></blockquote><p>这是本删除程序的最后一步，也是至关重要的一步。对各类别需删除记忆深浅程度进行评估，由浅入深，循序渐进。执行删除操作：对于浅层次痛苦记忆进行存储空间占用法进行删除，利用工作、学习和运动等来丰富个人生活，形成新的美好记忆，将浅层次痛苦记忆逐渐压缩出记忆存储区。对于一般层次痛苦记忆采取在我疗养法进行时长较长的删除操作，利用之前与对方留下的美好记忆为一般层次痛苦记忆稀释，让时间作为催化剂促进该类记忆的删除，虽耗时长，但犹可基本完成删除操作。对于极其深刻的痛苦回忆，需要用暴力移除的方法进行删除操作，需要有极大的勇气和决心，耗尽一个个难熬的夜晚，用酒精或自虐进行辅助，暂时性封闭该存储区，相当于将记忆文件移到回收站，但却无法彻底删除，一旦在生活中有误操作，这些记忆又会进一步深化，因此该操作需管理员最高权限，并谨慎执行操作。</p><p><img src="http://upload-images.jianshu.io/upload_images/2251123-27565ff8b1d662fc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Not don&#39;t,but can&#39;t"></p><blockquote><p>结论</p></blockquote><p>有了这个Delete程序，会让你在一定程度上忘记一些痛苦记忆，但美好记忆是无法也无理由去忘记。当留下的全是美好记忆后，请将其珍藏在心灵深处的某个角落，好好保管，不要妄自强行删除，否则，美好记忆也会变成痛苦回忆。该程序在一定程度上可将不好情绪和记忆暂时屏蔽，留下美好的积极的记忆，供余生去想念。然而，从结果上来说，该程序是失败的，事实证明，强大如程序员，也不能像处理程序一样面对感情，且行且珍惜。</p><p><strong>如需下载本程序，本人将整理后托管至Github，敬请期待－－</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2251123-200142e6247ae54d.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
      <category term="program" scheme="https://fusugz.github.io/categories/program/"/>
    
    
      <category term="forget" scheme="https://fusugz.github.io/tags/forget/"/>
    
  </entry>
  
</feed>
